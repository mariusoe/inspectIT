<?xml version="1.0"?>
<!-- ======================================================================
     inspectIT - Agent component
     Sophisticated Monitoring tool by NovaTec GmbH
     ====================================================================== -->
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="inspectIT Agent" default="release-all" basedir=".">
	<description>
		Build file for the agent component. This build provides build code for the
		agent project (contains all features that the agent release shares for java
		version 5 and upward).
	</description>


	<!-- *************************************************************** -->
	<!--                      S E T T I N G S                            -->
	<!-- *************************************************************** -->

	<property file="${basedir}/build.properties" />

	<path id="path.agent.classes">
		<pathelement location="${build.agent.classes}" />
	</path>

	<path id="path.agent.test.classes">
		<pathelement location="${build.agent.test.classes}" />
	</path>

	<path id="path.common.classes">
		<pathelement location="${build.commons.classes}" />
	</path>


	<!-- *************************************************************** -->
	<!--                        T A R G E T S                            -->
	<!-- *************************************************************** -->


	<target name="clean" description="--> Cleans the project">
		<delete dir="${build.root}" />
		<delete dir="${dist.root}" />
		<delete dir="${release.root}" />
	</target>

	<target name="init" description="--> Creates necessary folder structure">
		<mkdir dir="${build.root}" />
		<mkdir dir="${release.root}" />
		<antcall target="init-ivy" />

		<!-- ivy properties used for the agent -->
		<ivy:settings file="${ivy.settings.dir}/ivysettings.xml" />
		<ivy:resolve file="${ivy.file}" />
		<ivy:cachepath pathid="lib.prod" conf="prod" />
		<ivy:cachepath pathid="lib.test" conf="test" />


		<taskdef name="testng" classpathref="lib.test" classname="org.testng.TestNGAntTask" />
		<taskdef name="cobertura-instrument" classname="net.sourceforge.cobertura.ant.InstrumentTask" classpathref="lib.test" />
		<taskdef name="cobertura-merge" classname="net.sourceforge.cobertura.ant.MergeTask" classpathref="lib.test" />
		<taskdef name="cobertura-report" classname="net.sourceforge.cobertura.ant.ReportTask" classpathref="lib.test" />
	</target>

	<target name="init-static-analysis">
		<ivy:settings file="${ivy.settings.dir}/ivysettings.xml" />
		<!-- needed for Checkstyle, PMD & Findbugs -->
		<ivy:cachepath pathid="path.checkstyle" organisation="com.puppycrawl.tools" module="checkstyle" revision="5.5" conf="default" inline="true" />
		<ivy:cachepath pathid="path.pmd" organisation="pmd" module="pmd" revision="4.3" conf="default" inline="true" />
		<ivy:cachepath pathid="path.findbugs" organisation="com.google.code.findbugs" module="findbugs-ant" revision="2.0.0" conf="default" inline="true" />
		<!-- Ingnore path missing warnings -->
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="path.pmd" />
		<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" classpathref="path.pmd" />
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="path.findbugs" />
		<taskdef resource="checkstyletask.properties" classpathref="path.checkstyle" />
	</target>


	<!-- *************************************************************** -->
	<!--                   B U I L D    T A R G E T S                    -->
	<!-- *************************************************************** -->
	<!-- These targets are used to build the projects that are used      -->
	<!-- to create the agent component. Note that the agent components   -->
	<!-- may be built from different projects depending on the           -->
	<!-- environment in which the agent should be applied                -->
	<!-- *************************************************************** -->

	<target name="build-agent" depends="init, build-commons">
		<mkdir dir="${build.agent.classes}" />

		<javac source="1.5" target="1.5" debug="true" nowarn="off" destdir="${build.agent.classes}" srcdir="${src.root}" includeAntRuntime="no">
			<classpath refid="lib.prod" />
			<classpath refid="path.agent.classes" />
			<classpath refid="path.common.classes" />
			<compilerarg compiler="org.eclipse.jdt.core.JDTCompilerAdapter" line="-warn:${list.warning.options},+unused -Xemacs" />
		</javac>
	</target>

	<target name="build-commons" description="--> builds a clean distribution of the commons project and copies the classes to the local build folder">
		<mkdir dir="${build.commons.classes}" />

		<javac source="1.5" target="1.5" debug="true" fork="true" destdir="${build.commons.classes}" srcdir="${commons.src}" includeAntRuntime="no"/>

		<jar destfile="${build.commons.classes}/commons.jar">
			<fileset dir="${build.commons.classes}" includes="**/*.class" />
		</jar>
	</target>



	<!-- *************************************************************** -->
	<!--                Q U A L I T Y     T A R G E T S                  -->
	<!-- *************************************************************** -->
	<!-- These targets are used to ensure the quality of the agent       -->
	<!-- component.                                                      -->
	<!-- *************************************************************** -->

	<target name="functional-tests" depends="build-agent">
		<mkdir dir="${build.agent.test.classes}" />
		<mkdir dir="${build.qa.test.testdata}" />
		<mkdir dir="${build.qa.test.coveragedata}" />

		<javac source="1.5" target="1.5" debug="true" nowarn="off" destdir="${build.agent.test.classes}" srcdir="${src.test.root}" includeAntRuntime="no">
			<classpath refid="lib.prod" />
			<classpath refid="lib.test" />
			<classpath refid="path.agent.classes" />
			<classpath refid="path.common.classes" />
		</javac>

		<!-- instrument the classes that should be included in test coverage -->
		<mkdir dir="${build.agent.instrumented.classes}" />

		<!-- ensure that the original class files are not touched as we do not want to -->
		<!-- ship classes that are instrumented with cobertura to the customer -->
		<copy todir="${build.agent.instrumented.classes}">
			<fileset dir="${build.agent.classes}" />
		</copy>

		<cobertura-instrument datafile="${build.qa.test.coveragedata}/cobertura.ser">
			<includeClasses regex="info.novatec.inspectit.*" />
			<excludeClasses regex="info.novatec.inspectit.*\.test.*" />
			<excludeClasses regex="info.novatec.inspectit.javassist.*" />
			<excludeClasses regex="info.novatec.inspectit.cmr.*" />
			<excludeClasses regex="info.novatec.inspectit.communication.*" />
			<instrumentationClasspath>
				<path location="${build.agent.instrumented.classes}" />
			</instrumentationClasspath>
			<classpath refid="lib.prod" />
			<classpath refid="lib.test" />
			<classpath refid="path.common.classes" />
			<classpath location="${build.agent.instrumented.classes}" />
		</cobertura-instrument>

		<testng failureproperty="error.test.agent" outputdir="${build.qa.test.testdata}" haltonfailure="${testng.haltonfailure}">
			<classpath refid="path.agent.test.classes" />
			<classpath refid="lib.prod" />
			<classpath refid="lib.test" />
			<classpath refid="path.common.classes" />
			<classpath location="${build.agent.instrumented.classes}" />

			<jvmarg value="-Dnet.sourceforge.cobertura.datafile=${build.qa.test.coveragedata}/cobertura.ser" />

			<xmlfileset file="${testng.file}" />
		</testng>

		<!-- create cobertura html and xml reports and link to the interesting parts -->
		<cobertura-report format="html" destdir="${build.qa.test.coveragedata}" srcdir="${src.root}" datafile="${build.qa.test.coveragedata}/cobertura.ser">
			<fileset dir="${src.root}" includes="**/*.java" excludes="**/javassist/**" />
		</cobertura-report>
		<cobertura-report format="xml" destdir="${build.qa.test.coveragedata}" srcdir="${src.root}" datafile="${build.qa.test.coveragedata}/cobertura.ser">
			<fileset dir="${src.root}" includes="**/*.java" excludes="**/javassist/**" />
		</cobertura-report>
		<echo file="${build.qa.test}/coverage.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=coveragedata/index.html&quot; >" />

		<!-- create html pages that link to the interesting parts -->
		<echo file="${build.qa.test}/testresults.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=testdata/index.html&quot; >" />
		<echo file="${build.qa.test}/testreport.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=testdata/emailable-report.html&quot; >" />
	</target>


	<target name="static-analysis" depends="init, init-static-analysis, build-agent">
		<mkdir dir="${build.qa.analysis}" />
		<mkdir dir="${build.qa.analysis.pmd}" />
		<mkdir dir="${build.qa.analysis.checkstyle}" />
		<mkdir dir="${build.qa.analysis.findbugs}" />
		<mkdir dir="${build.qa.analysis.cpd}" />

		<pmd maxRuleViolations="${pmd.maximum.violations}" rulesetfiles="${pmd.rules.file}" classpath="path.pmd">
			<formatter type="html" toFile="${build.qa.analysis.pmd}/default_report.html" toConsole="true" />
			<formatter type="summaryhtml" toFile="${build.qa.analysis.pmd}/summary_report.html" toConsole="true" />
			<formatter type="xml" toFile="${build.qa.analysis.pmd}/pmd_results.xml" />
			<fileset dir="${src.root}">
				<include name="info/novatec/inspectit/**/*.java" />
				<exclude name="**/javassist/**" />
				<exclude name="info/novatec/inspectit/**/test/**" />
			</fileset>
			<fileset dir="${commons.src}">
				<include name="info/novatec/inspectit/**/*.java" />
				<exclude name="**/*_Stub.java" />
			</fileset>
		</pmd>
		<xslt in="${build.qa.analysis.pmd}/pmd_results.xml" style="${pmd.config.root}/pmd-report.xslt" out="${build.qa.analysis.pmd}/sortable_report.html" />
		<copy todir="${build.qa.analysis.pmd}" file="${pmd.config.root}/sorttable.js" />
		<!-- this js is used for the sortable report -->
		<echo file="${build.qa.analysis}/pmd.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=pmd/sortable_report.html&quot; >" />

		<checkstyle classpath="path.checkstyle" config="${checkstyle.config.file}" failureProperty="checkstyle.failure" failOnViolation="false" maxerrors="${checkstyle.max.errors}" maxwarnings="${checkstyle.max.warnings}">
			<formatter type="xml" tofile="${build.qa.analysis.checkstyle}/checkstyle_results.xml" />
			<fileset dir="${src.root}">
				<include name="info/novatec/inspectit/**/*.java" />
				<exclude name="**/javassist/**" />
				<exclude name="info/novatec/inspectit/**/test/**" />
			</fileset>
		</checkstyle>

		<xslt in="${build.qa.analysis.checkstyle}/checkstyle_results.xml" out="${build.qa.analysis.checkstyle}/checkstyle_report.html" style="${checkstyle.config.root}/checkstyle.xsl" />
		<echo file="${build.qa.analysis}/checkstyle.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=checkstyle/checkstyle_report.html&quot; >" />


		<!-- The path is converted to a property and enables the usage of findbugs without having a local installation-->
		<!-- See also: http://blogs.sun.com/ritzmann/entry/running_findbugs_with_ant_tasks -->
		<pathconvert property="findbugs.classpath">
			<path refid="path.findbugs" />
		</pathconvert>

		<findbugs output="xml" classpath="${findbugs.classpath}" excludefilter="${basedir}/resources/findbugs/excludeFilter.xml" outputFile="${build.qa.analysis.findbugs}/findbugs.xml" pluginlist="findbugs.jar">
			<sourcePath path="${src.root}" />
			<class location="${build.agent.classes}" />
			<auxClasspath>
				<path refid="lib.prod" />
				<path refid="lib.test" />
				<pathelement path="${build.commons.classes}" />
			</auxClasspath>
		</findbugs>
		<xslt in="${build.qa.analysis.findbugs}/findbugs.xml" style="${basedir}/resources/findbugs/fancy-hist.xsl" out="${build.qa.analysis}/findbugs.html" />

		<cpd format="xml" language="java" minimumTokenCount="100" outputFile="${build.qa.analysis.cpd}/cpd.xml">
			<fileset dir="${src.root}">
				<include name="info/novatec/inspectit/**/*.java" />
				<exclude name="**/javassist/**" />
				<exclude name="info/novatec/inspectit/**/test/**" />
			</fileset>
		</cpd>
	</target>


	<!-- *************************************************************** -->
	<!--                R E L E A S E     T A R G E T S                  -->
	<!-- *************************************************************** -->

	<!-- dependencies are unpacked and added to the agent release -->
	<!-- as this makes it easier to package the agent -->
	<target name="unpack-dependencies" depends="init" description="unpacks all dependencies">
		<mkdir dir="${build.extract.root}" />

		<unzip dest="${build.extract.root}">
			<path refid="lib.prod" />
			<patternset>
				<include name="**/*.class" />
			</patternset>
		</unzip>
	</target>

	<target name="-create-thirdparty-contributions">
		<echo file="${build.release}/thirdparty.txt" message="The inspectIT agent component uses the following third party libraries: ${line.separator}
BSD License : PicoContainer (1.3) ${line.separator}
Mozilla Public License (MPL), 1.1 : Javassist (3.12.0.GA)" />
	</target>

	<target name="release-sun1.5" depends="build-agent, unpack-dependencies" description="--> make a jar file for the whole project containing all dependencies">
		<mkdir dir="${build.release}" />
		<delete dir="${build.release}/sun1.5-data" />
		<mkdir dir="${build.release}/sun1.5-data" />
		<mkdir dir="${build.release}/sun1.5-data/agent" />
		<mkdir dir="${build.release}/sun1.5-data/agent/config" />

		<antcall target="-create-thirdparty-contributions" />

		<copy todir="${build.release}/sun1.5-data/agent/config">
			<fileset dir="${config.root}" includes="**/*.*" />
		</copy>

		<copy todir="${build.release}/sun1.5-data/agent">
			<fileset dir="${build.release}" includes="thirdparty.txt" />
		</copy>

		<jar destfile="${build.release}/sun1.5-data/agent/${dist.jar.name}" manifest="${basedir}/META-INF/MANIFEST.MF">
			<fileset dir="${build.agent.classes}" includes="**/*.class" />
			<fileset dir="${build.commons.classes}" includes="**/*.class" />
			<fileset dir="${build.extract.root}" includes="**/*.class" />
			<fileset dir="${commons.src}" includes="version.log" />
		</jar>

		<zip destfile="${release.root}/${release.name.sun15}" basedir="${build.release}/sun1.5-data" />
		<zip destfile="${release.root}/${release.name.sun15}" update="true">
			<zipfileset dir="${commons.basedir}/resources" prefix="agent" includes="inspectIT-licence.pdf" />
		</zip>
	</target>

	<target name="release-all" depends="release-sun1.5" description="--> releases the agent for all versions" />

	<target name="integrate-version-information" description="This target creates a version.log file in the commons directory.">
		<property environment="env" />
		<property name="version" value="${env.RELEASE_VERSION}.${env.BUILD_NUMBER}" />

		<echo message="Using version: ${version}" />

		<echo file="${commons.src}/version.log" message="${version}" />
		<echo message="Wrote version.log to Commons/src" />
	</target>


	<!-- *************************************************************** -->
	<!--                I V Y     T A R G E T S   		                 -->
	<!-- *************************************************************** -->
	<target name="checkForIvy">
		<condition property="skipIvyDownload">
			<available file="${ivy.jar.file}" property="skipIvyDownload" />
		</condition>
	</target>

	<target name="init-ivy" depends="checkForIvy" unless="skipIvyDownload">
		<mkdir dir="${ivy.jar.dir}" />
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<echo message="Installing ivy version: ${ivy.install.version}" />
		<get src="${ivy.download.url}" dest="${ivy.jar.file}" usetimestamp="true" />

		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<target name="clean-ivy" depends="init-ivy" description="--> clean the ivy installation and the ivy cache">
		<!--  The ivy cache is cleaned and the install directory is deleted -->
		<ivy:cleancache />
		<delete dir="${ivy.jar.dir}" />
	</target>
</project>
