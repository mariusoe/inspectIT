<?xml version="1.0"?>
<!-- ====================================================================== 
     inspectIT - CMR    
     Sophisticated Monitoring tool by NovaTec GmbH
     ====================================================================== -->
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="inspectIT - CMR" default="release" basedir=".">
	<description>
            Sophisticated Monitoring tool by NovaTec GmbH
    </description>

	<property file="${basedir}/build.properties" />

	<!-- classpath settings -->
	<path id="compile.classpath">
		<fileset dir="${lib.root}" includes="**/*.jar" />
		<pathelement location="${build.commons.classes}" />
	</path>

	<path id="complete.classpath">
		<!--path refid="${classpath_ref}" /-->
		<pathelement location="${build.cmr.classes}" />
		<pathelement location="${build.commons.classes}" />
		<fileset dir="${lib.root}" includes="**/*.jar" />
	</path>

	<path id="cmr.classpath">
		<fileset dir="${build.release.root.cmr}" includes="**/*.jar" />
	</path>

	<path id="path.test.class">
		<pathelement location="${build.test.classes}" />
	</path>

	<path id="path.common.classes">
		<pathelement location="${build.commons.classes}" />
	</path>

	<!-- classpath for findbugs is needed because it enables to run findbugs without having a local installation -->
	<path id="findbugs.classpath">
		<fileset dir="${lib.root}" includes="**/*.jar" />
	</path>

	<!-- will be available after all dependencies are retrieved by the init target -->
	<path id="path.libs">
		<fileset dir="${lib.root}" includes="**/*.jar" />
	</path>

	<target name="clean" description="--> Cleans the project">
		<delete dir="${build.root}" />
		<delete dir="${dist.root}" />
		<delete dir="${src.generated.root}" />
		<delete dir="${lib.root}/prod" />
		<delete dir="${lib.root}/test" />
	</target>

	<target name="init" description="--> Creates necessary folder structure">
		<mkdir dir="${build.root}" />
		<mkdir dir="${src.generated.root}" />
		<antcall target="init-ivy" />

		<ivy:settings file="${ivy.settings.dir}/ivysettings.xml" />
		<ivy:resolve file="${ivy.file}" />
		<ivy:retrieve pattern="${lib.root}/[conf]/[artifact].[ext]" />

		<taskdef name="testng" classname="org.testng.TestNGAntTask" classpathref="path.libs" />
		<taskdef name="cobertura-instrument" classname="net.sourceforge.cobertura.ant.InstrumentTask" classpathref="path.libs" />
		<taskdef name="cobertura-merge" classname="net.sourceforge.cobertura.ant.MergeTask" classpathref="path.libs" />
		<taskdef name="cobertura-report" classname="net.sourceforge.cobertura.ant.ReportTask" classpathref="path.libs" />
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="path.libs" />
		<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" classpathref="path.libs" />
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="path.libs" />
		<taskdef resource="checkstyletask.properties" classpathref="path.libs" />
		<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="path.libs" />
	</target>

	<target name="init-ftp-task">
		<get src="${ftp.commonsnet.url}" dest="${ivy.jar.dir}/${ftp.commonsnet.jar}" usetimestamp="true" />
		<get src="${ftp.jakartaoro.url}" dest="${ivy.jar.dir}/${ftp.jakartaoro.jar}" usetimestamp="true" />

		<!-- This is a workaround to fix the problem that the FTP task is loaded by a different classloader. -->
		<!-- This must not be changed, unless you know what you are doing. -->
		<path id="wptg.classpath">
			<fileset dir="${user.home}/.ant/lib" includes="${ftp.commonsnet.jar}" />
			<fileset dir="${user.home}/.ant/lib" includes="${ftp.jakartaoro.jar}" />
			<fileset dir="${ant.library.dir}" includes="ant-commons-net.jar" />
		</path>
		<classloader classpathref="wptg.classpath" parentFirst="false" />
		<taskdef name="wptg-ftp" classname="org.apache.tools.ant.taskdefs.optional.net.FTP" loaderref="ant.coreLoader" />
	</target>


	<!-- *************************************************************** -->
	<!--                   B U I L D    T A R G E T S                    -->
	<!-- *************************************************************** -->
	<!-- These targets are used to build the projects that are used      -->
	<!-- to create the CMR component.                                    -->
	<!-- *************************************************************** -->

	<target name="build-commons" description="--> builds a clean distribution of the commons project and copies the classes to the local build folder">
		<mkdir dir="${build.commons.classes}" />

		<javac source="1.4" target="1.4" debug="true" fork="true" includeAntRuntime="no" destdir="${build.commons.classes}" srcdir="${src.commons}">
			<compilerarg value="-Xlint:unchecked" />
		</javac>
	</target>

	<target name="build" depends="init, build-commons" description="--> Compiles the sources">
		<mkdir dir="${build.cmr.generated.classes}" />
		<mkdir dir="${build.cmr.classes}" />

		<javac source="1.5" target="1.5" debug="true" debuglevel="lines,vars,source" includeAntRuntime="no" destdir="${build.cmr.generated.classes}" srcdir="${src.generated.root}" classpathref="compile.classpath">
			<compilerarg value="-Xlint:unchecked" />
		</javac>
		<javac source="1.5" target="1.5" debug="true" debuglevel="lines,vars,source" includeAntRuntime="no" destdir="${build.cmr.classes}" srcdir="${src.root}" classpathref="compile.classpath">
			<compilerarg value="-Xlint:unchecked" />
		</javac>

		<rmic stubversion="1.2" base="${build.cmr.generated.classes}" classpathref="complete.classpath" classname="info.novatec.inspectit.cmr.service.AgentStorageService" sourcebase="${src.generated.root}" />
		<rmic stubversion="1.2" base="${build.cmr.generated.classes}" classpathref="complete.classpath" classname="info.novatec.inspectit.cmr.service.RegistrationService" sourcebase="${src.generated.root}" />
	</target>


	<!-- *************************************************************** -->
	<!--                Q U A L I T Y     T A R G E T S                  -->
	<!-- *************************************************************** -->
	<!-- These targets are used to ensure the quality of the agent       -->
	<!-- component.                                                      -->
	<!-- *************************************************************** -->

	<!--  It depends on the release target, because we need the compiled classes -->
	<target name="functional-tests" depends="build">
		<mkdir dir="${build.qa.test.testdata}" />
		<mkdir dir="${build.qa.test.coveragedata}" />
		<mkdir dir="${build.test.classes}" />

		<javac source="1.6" target="1.6" debug="true" debuglevel="lines,vars,source" nowarn="off" includeAntRuntime="no" destdir="${build.test.classes}" srcdir="${test.root}">
			<classpath refid="complete.classpath" />
			<compilerarg value="-Xlint:unchecked" />
		</javac>

		<!-- instrument the classes that should be included in test coverage -->
		<mkdir dir="${build.instrumented.classes}" />

		<!-- ensure that the original class files are not touched as we do not want to -->
		<!-- ship classes that are instrumented with cobertura to the customer -->
		<copy todir="${build.instrumented.classes}">
			<fileset dir="${build.cmr.classes}" includes="**/*.class" />
		</copy>

		<cobertura-instrument datafile="${build.qa.test.coveragedata}/cobertura.ser">
			<includeClasses regex="info.novatec.inspectit.*" />
			<excludeClasses regex="info.novatec.inspectit.*\.test.*" />
			<excludeClasses regex="info.novatec.inspectit.*\.*_Stub.*" />
			<instrumentationClasspath>
				<path location="${build.instrumented.classes}" />
			</instrumentationClasspath>
			<classpath refid="compile.classpath" />
			<classpath location="${build.instrumented.classes}" />
		</cobertura-instrument>

		<testng outputdir="${build.qa.test.testdata}" haltonfailure="${testng.haltonfailure}">
			<!-- this absolutely needs to be the first entry, else the instrumented classes are not taken but the normal ones -->
			<classpath location="${build.instrumented.classes}" />
			<classpath refid="complete.classpath" />
			<classpath refid="path.test.class" />
			<!-- this entry is necessary in order to get the spring configurations needed for the test -->
			<classpath location="${src.root}" />
			<classpath location="${test.root}" />

			<jvmarg value="-Dnet.sourceforge.cobertura.datafile=${build.qa.test.coveragedata}/cobertura.ser" />
			<xmlfileset file="${resources.testng}/testng.xml" />
		</testng>


		<!-- create cobertura html and xml reports and link to the interesting parts -->
		<cobertura-report format="html" destdir="${build.qa.test.coveragedata}" srcdir="${src.root}" datafile="${build.qa.test.coveragedata}/cobertura.ser">
			<fileset dir="${src.root}" includes="**/*.java" />
			<fileset dir="${test.root}" includes="**/*.java" />
		</cobertura-report>
		<cobertura-report format="xml" destdir="${build.qa.test.coveragedata}" srcdir="${src.root}" datafile="${build.qa.test.coveragedata}/cobertura.ser">
			<fileset dir="${src.root}" includes="**/*.java" />
			<fileset dir="${test.root}" includes="**/*.java" />
		</cobertura-report>
		<echo file="${build.qa.test}/coverage.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=coveragedata/index.html&quot; >" />

		<!-- create html pages that link to the interesting parts -->
		<echo file="${build.qa.test}/testresults.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=testdata/index.html&quot; >" />
		<echo file="${build.qa.test}/testreport.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=testdata/emailable-report.html&quot; >" />
	</target>


	<!-- Depends on release, because the compiled classes are needed for the analysis -->
	<target name="static-analysis" depends="build">
		<mkdir dir="${build.qa.analysis}" />
		<mkdir dir="${build.qa.analysis.pmd}" />
		<mkdir dir="${build.qa.analysis.checkstyle}" />
		<mkdir dir="${build.qa.analysis.findbugs}" />
		<mkdir dir="${build.qa.analysis.cpd}" />

		<echo message="Analyse Code with tool: PMD" level="info" />
		<pmd maxRuleViolations="${pmd.maximum.violations}" rulesetfiles="${pmd.rules.file}">
			<formatter type="html" toFile="${build.qa.analysis.pmd}/default_report.html" toConsole="true" />
			<formatter type="summaryhtml" toFile="${build.qa.analysis.pmd}/summary_report.html" toConsole="true" />
			<formatter type="xml" toFile="${build.qa.analysis.pmd}/pmd_results.xml" />
			<fileset dir="${src.root}">
				<include name="info/novatec/inspectit/**/*.java" />
				<exclude name="**/*_Stub.java" />
			</fileset>
			<fileset dir="${src.commons}">
				<include name="info/novatec/inspectit/**/*.java" />
				<exclude name="**/*_Stub.java" />
			</fileset>
		</pmd>
		<xslt in="${build.qa.analysis.pmd}/pmd_results.xml" style="${pmd.config.root}/pmd-report.xslt" out="${build.qa.analysis.pmd}/sortable_report.html" />
		<copy todir="${build.qa.analysis.pmd}" file="${pmd.config.root}/sorttable.js" />
		<!-- this js is used for the sortable report -->
		<echo file="${build.qa.analysis}/pmd.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=pmd/sortable_report.html&quot; >" />

		<echo message="Analyse Code with tool: Checkstyle" level="info" />
		<checkstyle config="${checkstyle.config.file}" failureProperty="checkstyle.failure" failOnViolation="false" maxerrors="${checkstyle.max.errors}" maxwarnings="${checkstyle.max.warnings}">
			<formatter type="xml" tofile="${build.qa.analysis.checkstyle}/checkstyle_results.xml" />
			<fileset dir="${src.root}" includes="**/*.java" excludes="**/*_Stub.java" />
		</checkstyle>

		<xslt in="${build.qa.analysis.checkstyle}/checkstyle_results.xml" out="${build.qa.analysis.checkstyle}/checkstyle_report.html" style="${checkstyle.config.root}/checkstyle.xsl" />
		<echo file="${build.qa.analysis}/checkstyle.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=checkstyle/checkstyle_report.html&quot; >" />

		<echo message="Analyse Code with tool: FindBugs" level="info" />
		<!-- The path is converted to a property and enables the usage of findbugs without having a local installation-->
		<!-- See also: http://blogs.sun.com/ritzmann/entry/running_findbugs_with_ant_tasks -->
		<pathconvert property="findbugs.classpath">
			<path refid="findbugs.classpath" />
		</pathconvert>

		<findbugs output="xml" classpath="${findbugs.classpath}" outputFile="${build.qa.analysis.findbugs}/findbugs.xml" pluginlist="${lib.root}/test/findbugs.jar">
			<sourcePath path="${src.root}" />
			<class location="${build.cmr.classes}" />
			<auxClasspath>
				<pathelement path="${build.commons.classes}" />
				<fileset dir="${lib.root}" includes="**/*.jar" />
			</auxClasspath>
		</findbugs>
		<xslt in="${build.qa.analysis.findbugs}/findbugs.xml" style="${basedir}/resources/findbugs/fancy-hist.xsl" out="${build.qa.analysis}/findbugs.html" />

		<echo message="Analyse Code with tool: CPD" level="info" />
		<cpd format="xml" language="java" minimumTokenCount="100" outputFile="${build.qa.analysis.cpd}/cpd.xml">
			<fileset dir="${src.root}" includes="**/*.java" excludes="**/*_Stub.java" />
		</cpd>
	</target>


	<!-- *************************************************************** -->
	<!--                R E L E A S E     T A R G E T S                  -->
	<!-- *************************************************************** -->

	<target name="release" depends="build" description="--> Creates the distribution jar">
		<mkdir dir="${release.root}" />
		<mkdir dir="${build.release.root}" />
		<mkdir dir="${build.release.root.cmr}" />
		<mkdir dir="${build.scripts}" />

		<jar destfile="${build.release.root.cmr}/${dist.jar.name}" manifest="${basedir}/resources/META-INF/MANIFEST.MF">
			<fileset dir="${build.cmr.generated.classes}" includes="**/*.class" />
			<fileset dir="${build.cmr.classes}" includes="**/*.class" />
			<fileset dir="${src.root}" includes="**/*.xml" />
			<fileset dir="${src.root}" includes="**/*.properties" />
			<fileset dir="${src.commons}" includes="version.log" />
		</jar>

		<copy todir="${build.release.root.cmr}/lib">
			<fileset dir="${lib.root}/prod" includes="**/*.jar" />
		</copy>

		<jar destfile="${build.release.root.cmr}/lib/inspectit-commons.jar" basedir="${build.commons.classes}" />

		<mkdir dir="${build.release.root.cmr}/license" />
		<copy todir="${build.release.root.cmr}/license" file="${basedir}/license/publicCerts.store" />

		<!-- Create the third party libraries textual representation -->
		<!-- The file is put at ${build.release.root.cmr}/thirdparty.txt -->
		<antcall target="-create-thirdparty-notification" />

		<!-- Create the different distributions -->
		<antcall target="-retrieve-jre-installations" />
		<antcall target="-linux-x86" />
		<antcall target="-linux-x64" />
		<antcall target="-windows-x86" />
		<antcall target="-windows-x64" />
	</target>

	<!-- Calls the release target and then the analysis targets -->
	<target name="release-and-analyze" depends="static-analysis, functional-tests, release" description="--> Calls the release target and then executes the static analysis with the functional tests" />

	<!-- *************************************************************** -->
	<!--           P R I V A T E    B U I L D     T A R G E T S          -->
	<!-- *************************************************************** -->
	<target name="-retrieve-jre-installations" depends="init-ftp-task" unless="skip.jre.download">
		<foreach list="${jvm.list}" param="file" target="checkFile" />

		<!-- delete tmp folder -->
		<delete dir="${jvm.root}/tmp" />
	</target>

	<target name="checkFile" depends="check.download,check.md5" if="file" />

	<target name="check.download" unless="download-ok" depends="check.init">
		<echo message="Downloading ${md5.file}" />
		<wptg-ftp server="${ftp.server}" verbose="true" password="${ftp.pw}" userid="${ftp.user}" action="get" remotedir="${ftp.remotedir}" newer="true" retriesAllowed="5" passive="true">
			<fileset dir="${jvm.root}/tmp">
				<include name="${md5.file}" />
			</fileset>
		</wptg-ftp>

		<!-- download the JRE only if it is not already locally available -->
		<available file="${jvm.root}/${zip.file}" property="download-jre" value="true" />
		<if>
			<isfalse value="${download-jre}" />
			<then>
				<echo message="Downloading ${zip.file}" />
				<wptg-ftp server="${ftp.server}" verbose="true" password="${ftp.pw}" userid="${ftp.user}" action="get" remotedir="${ftp.remotedir}" newer="true" retriesAllowed="5" passive="true">
					<fileset dir="${jvm.root}/tmp">
						<include name="${zip.file}" />
					</fileset>
				</wptg-ftp>
			</then>
			<else>
				<echo message="${zip.file} already locally available, so skipping download." />
			</else>
		</if>
	</target>

	<target name="check.init">
		<property name="zip.file" value="${file}.zip" />
		<property name="md5.file" value="${file}.md5" />
		<condition property="md5-ok">
			<isset property="${zip.file}.isValid" />
		</condition>
		<condition property="download-ok">
			<and>
				<available file="${jvm.root}/${zip.file}" />
				<available file="${jvm.root}/${md5.file}" />
			</and>
		</condition>
	</target>

	<target name="check.md5" unless="md5-ok" depends="check.init">
		<trycatch>
			<try>
				<!-- the valid md5 value specified in the md5 file -->
				<loadfile srcFile="${jvm.root}/tmp/${md5.file}" property="md5.valid">
					<!-- need to filter whitespace in the md5sum -->
					<filterchain>
						<striplinebreaks />
						<tokenfilter>
							<stringtokenizer />
							<replaceregex pattern="${zip.file}" replace="" />
						</tokenfilter>
						<tokenfilter>
							<trim />
						</tokenfilter>
					</filterchain>
				</loadfile>

				<!-- the actual md5 value -->
				<checksum file="${jvm.root}/${zip.file}" property="md5.actual" />
				<!-- compare them -->
				<condition property="md5.isValid">
					<equals arg1="${md5.valid}" arg2="${md5.actual}" />
				</condition>

				<if>
					<istrue value="${md5.isValid}" />
					<then />
					<else>
						<!-- updates where found, so notify the user -->
						<echo message="${zip.file}: Different MD5 checksum !!!" />
						<echo message="-> expected: ${md5.valid}" />
						<echo message="-> actual  : ${md5.actual}" />
						<!-- rename the file to indicate that it is a newer version -->
						<antcall target="-notify-about-jre-update" />
						<echo message="Downloading ${zip.file}" />
						<wptg-ftp server="${ftp.server}" verbose="true" password="${ftp.pw}" userid="${ftp.user}" action="get" remotedir="${ftp.remotedir}" newer="true" retriesAllowed="5"  passive="true">
							<fileset dir="${jvm.root}/tmp">
								<include name="${zip.file}" />
							</fileset>
						</wptg-ftp>
						<move file="${jvm.root}/tmp/${zip.file}" tofile="${jvm.root}/tmp/${file}.newer-version.zip" overwrite="true" failonerror="true" />
						<delete dir="${jvm.root}/${zip.file}" />
						<move file="${jvm.root}/tmp/${file}.newer-version.zip" tofile="${jvm.root}/${zip.file}" failonerror="true" />
					</else>
				</if>
			</try>
			<catch>
				<!-- the file was not there in the first place, so just put it into the correct folder -->
				<echo message="${zip.file} was not available, so moving it to the correct location." />
				<move file="${jvm.root}/tmp/${zip.file}" tofile="${jvm.root}/${zip.file}" overwrite="true" failonerror="true" />
			</catch>
		</trycatch>
		<!-- now just delete the MD5 file -->
		<delete dir="${jvm.root}/tmp/${md5.file}" />
	</target>

	<target name="-notify-about-jre-update">
		<echo message="-------------------------------------------------------------" />
		<echo message="INFO: A newer JRE Version was found than currently available." />
		<echo message="--------------------------------------------------------------" />
		<echo message="The old version is going to be deleted and updated with the " />
		<echo message="newer version found on the FTP server." />
		<echo message="In case you don't want to update the JRE, you can skip " />
		<echo message="the whole update process by starting the Build again with the " />
		<echo message="option: -Dskip.jre.download=true" />
		<echo message="-------------------------------------------------------------" />
		<input>Press Return key to continue and to overwrite the JRE: ${file}</input>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
		          Targets for creating the final distributon containing the JRE.                     
		         - - - - - - - - - - - - - - - - - -->
	<target name="-linux-x86">
		<echo file="${build.scripts}/startup.sh" message="./jre/bin/java -Xms1024m -Xmx1024m -Xmn512M -XX:MaxPermSize=128m -XX:PermSize=128m -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=60 -XX:+UseParNewGC -XX:+CMSParallelRemarkEnabled -XX:+DisableExplicitGC -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:+AggressiveOpts -XX:+UseFastAccessorMethods -XX:+UseBiasedLocking -XX:+HeapDumpOnOutOfMemoryError -verbose:gc -XX:+PrintGCTimeStamps -XX:+PrintGCDetails -XX:+PrintTenuringDistribution -Xloggc:logs/gc.log -jar ${dist.jar.name}" />
		<tar destfile="${release.root}/inspectit-cmr.linux.x86.tar.gz" compression="gzip">
			<fileset dir="${build.release.root}" />
			<tarfileset file="${build.scripts}/startup.sh" prefix="CMR" filemode="755" />
			<zipfileset src="${jvm.root}/jre-linux-x86.zip" prefix="CMR/jre" filemode="755" />
			<zipfileset dir="${commons.basedir}/resources" prefix="CMR" includes="inspectIT-licence.pdf" />
		</tar>
		<delete file="${build.scripts}/startup.sh" />
	</target>

	<target name="-linux-x64">
		<echo file="${build.scripts}/startup.sh" message="./jre/bin/java -Xms2048m -Xmx2048m -Xmn1024M -XX:MaxPermSize=192m -XX:PermSize=128m -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=60 -XX:+UseParNewGC -XX:+CMSParallelRemarkEnabled -XX:+DisableExplicitGC -XX:SurvivorRatio=5 -XX:TargetSurvivorRatio=90 -XX:+AggressiveOpts -XX:+UseFastAccessorMethods -XX:+UseBiasedLocking -XX:+UseCompressedOops -XX:+HeapDumpOnOutOfMemoryError -verbose:gc -XX:+PrintGCTimeStamps -XX:+PrintGCDetails -XX:+PrintTenuringDistribution -Xloggc:logs/gc.log -jar ${dist.jar.name}" />
		<tar destfile="${release.root}/inspectit-cmr.linux.x64.tar.gz" compression="gzip">
			<fileset dir="${build.release.root}" />
			<tarfileset file="${build.scripts}/startup.sh" prefix="CMR" filemode="755" />
			<zipfileset src="${jvm.root}/jre-linux-x64.zip" prefix="CMR/jre" filemode="755" />
			<zipfileset dir="${commons.basedir}/resources" prefix="CMR" includes="inspectIT-licence.pdf" />
		</tar>
		<delete file="${build.scripts}/startup.sh" />
	</target>

	<target name="-windows-x86">
		<echo file="${build.scripts}/startup.bat" message="jre\bin\java.exe -Xms1024m -Xmx1024m -Xmn512M -XX:MaxPermSize=128m -XX:PermSize=128m -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=60 -XX:+UseParNewGC -XX:+CMSParallelRemarkEnabled -XX:+DisableExplicitGC -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:+AggressiveOpts -XX:+UseFastAccessorMethods -XX:+UseBiasedLocking -XX:+HeapDumpOnOutOfMemoryError -verbose:gc -XX:+PrintGCTimeStamps -XX:+PrintGCDetails -XX:+PrintTenuringDistribution -Xloggc:logs\gc.log -jar ${dist.jar.name}" />
		<zip destfile="${release.root}/inspectit-cmr.windows.x86.zip">
			<fileset dir="${build.release.root}" />
			<zipfileset file="${build.scripts}/startup.bat" prefix="CMR" />
			<zipfileset src="${jvm.root}/jre-windows-x86.zip" prefix="CMR/jre" />
			<zipfileset dir="${commons.basedir}/resources" prefix="CMR" includes="inspectIT-licence.pdf" />
		</zip>
		<delete file="${build.scripts}/startup.bat" />
	</target>

	<target name="-windows-x64">
		<echo file="${build.scripts}/startup.bat" message="jre\bin\java.exe -Xms2048m -Xmx2048m -Xmn1024M -XX:MaxPermSize=192m -XX:PermSize=128m -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=60 -XX:+UseParNewGC -XX:+CMSParallelRemarkEnabled -XX:+DisableExplicitGC -XX:SurvivorRatio=5 -XX:TargetSurvivorRatio=90 -XX:+AggressiveOpts -XX:+UseFastAccessorMethods -XX:+UseBiasedLocking -XX:+UseCompressedOops -XX:+HeapDumpOnOutOfMemoryError -verbose:gc -XX:+PrintGCTimeStamps -XX:+PrintGCDetails -XX:+PrintTenuringDistribution -Xloggc:logs\gc.log -jar ${dist.jar.name}" />
		<zip destfile="${release.root}/inspectit-cmr.windows.x64.zip">
			<fileset dir="${build.release.root}" />
			<zipfileset file="${build.scripts}/startup.bat" prefix="CMR" />
			<zipfileset src="${jvm.root}/jre-windows-x64.zip" prefix="CMR/jre" />
			<zipfileset dir="${commons.basedir}/resources" prefix="CMR" includes="inspectIT-licence.pdf" />
		</zip>
		<delete file="${build.scripts}/startup.bat" />
	</target>

	<target name="-create-thirdparty-notification">
		<echo file="${build.release.root.cmr}/thirdparty.txt" message="The CMR uses the following third party libraries: ${line.separator} ${line.separator}
Apache Software License, 1.1 : hessian (3.1.5) ${line.separator}
Apache Software License, 2.0 : commons-logging (1.1.1), log4j (1.2.15), spring (2.5.5), spring-web (2.5.5), servlet-api (2.5), commons-collections (3.2), cglib-nodep (2.1_3), quartz (1.5.2), jetty (6.1.16), jetty-util (6.1.16), commons-codec (1.3), truelicense (1.29), truexml (1.29), jettison (1.2) ${line.separator}
BSD License : dom4j (1.6.1), antlr (2.7.7), xstream (1.3.1) ${line.separator}
Common Development and Distribution License (CDDL), 1.0 : jta (1.0.1B) ${line.separator}
GNU Lesser General Public License (LGPL), 2.1 : hibernate (3.5.3-Final), c3p0 (0.9.1.2) ${line.separator}
MIT License : slf4j-api (1.5.6), slf4j-log4j12 (1.5.6) ${line.separator}
Mozilla Public License (MPL), 1.1 : Javassist (3.12.0.GA), h2 (1.2.138)" />
	</target>


	<!-- *************************************************************** -->
	<!--                I V Y     T A R G E T S   		                 -->
	<!-- *************************************************************** -->
	<target name="checkForIvy">
		<condition property="skipIvyDownload">
			<available file="${ivy.jar.file}" property="skipIvyDownload" />
		</condition>
	</target>

	<target name="init-ivy" depends="checkForIvy" unless="skipIvyDownload">
		<mkdir dir="${ivy.jar.dir}" />
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<echo message="Installing ivy version: ${ivy.install.version}" />
		<get src="${ivy.download.url}" dest="${ivy.jar.file}" usetimestamp="true" />

		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<target name="clean-ivy" depends="init-ivy" description="--> clean the ivy installation and the ivy cache">
		<!--  The ivy cache is cleaned and the install directory is deleted -->
		<ivy:cleancache />
		<delete dir="${ivy.jar.dir}" />
	</target>
</project>
