<?xml version="1.0"?>
<!-- ======================================================================
		inspectIT - CMR
		Sophisticated Monitoring tool by NovaTec GmbH
		====================================================================== -->
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="inspectIT - CMR" default="release" basedir=".">
	<description>
		Sophisticated Monitoring tool by NovaTec GmbH
	</description>

	<property file="${basedir}/build.properties" />

	<import file="${build.common-targets.file}" />

	<path id="path.test.class">
		<pathelement location="${build.test.classes}" />
	</path>

	<target name="clean" description="--> Cleans the project">
		<delete dir="${build.root}" failonerror="false" />
		<delete dir="${release.root}" failonerror="false" />
		<delete dir="${lib.root}/prod" failonerror="false" />
		<delete dir="${lib.root}/test" failonerror="false" />
	</target>

	<target name="init" description="--> Creates necessary folder structure" depends="init-ivy,init-antcontrib">
		<mkdir dir="${build.root}" />

		<ivy:settings file="${ivy.settings.file}" />
		<ivy:resolve file="${ivy.file}" />
		<ivy:cachepath pathid="lib.prod" conf="prod" />
		<ivy:cachepath pathid="lib.test" conf="test" />
		
		<ivy:resolve file="${ivy.file.commons}" />
		<ivy:cachepath pathid="lib.prod.commons" conf="prod" />
	
		<ivy:resolve file="${ivy.file.commonscs}" />
		<ivy:cachepath pathid="lib.prod.commonscs" conf="prod" />
	</target>

	<!-- *************************************************************** -->
	<!--                   B U I L D    T A R G E T S                    -->
	<!-- *************************************************************** -->
	<!-- These targets are used to build the projects that are used      -->
	<!-- to create the CMR component.                                    -->
	<!-- *************************************************************** -->

	<target name="release-commons" description="--> call the release of the commons project">
		<ant antfile="${build.commons.file}" target="clean" inheritAll="false" useNativeBasedir="true" />
		<ant antfile="${build.commons.file}" target="release" inheritAll="false" useNativeBasedir="true" />
	</target>

	<target name="release-commonscs" description="--> call the release of the commonscs project">
		<ant antfile="${build.commonscs.file}" target="clean" inheritAll="false" useNativeBasedir="true" />
		<ant antfile="${build.commonscs.file}" target="release" inheritAll="false" useNativeBasedir="true" />
	</target>

	<!-- Note that release of Commons is not neccesary because it will be called when releasing the CommonsCS -->
	<target name="build" depends="init, release-commonscs" description="--> Compiles the sources">
		<mkdir dir="${build.cmr.classes}" />

		<path id="compile.classpath">
			<pathelement location="${build.commons.classes}" />
			<pathelement location="${build.commonscs.classes}" />
			<path refid="lib.prod" />
			<path refid="lib.prod.commons" />
			<path refid="lib.prod.commonscs" />
		</path>

		<javac source="1.7" target="1.7" debug="true" debuglevel="lines,vars,source" destdir="${build.cmr.classes}" srcdir="${src.root}" classpathref="compile.classpath" includeAntRuntime="no" />
	</target>


	<!-- *************************************************************** -->
	<!--                Q U A L I T Y     T A R G E T S                  -->
	<!-- *************************************************************** -->
	<!-- These targets are used to ensure the quality of the agent       -->
	<!-- component.                                                      -->
	<!-- *************************************************************** -->

	<!--  It depends on the release target, because we need the compiled classes -->
	<target name="functional-tests" depends="build, init-functional-tests, init-classmexer">
		<mkdir dir="${build.qa.test.testdata}" />
		<mkdir dir="${build.qa.test.coveragedata}" />
		<mkdir dir="${build.test.classes}" />

		<path id="complete.classpath">
			<pathelement location="${build.cmr.classes}" />
			<fileset dir="${commons.build.release}" includes="*.jar" />
			<fileset dir="${commonscs.build.release}" includes="*.jar" />
			<path refid="lib.prod" />
			<path refid="lib.prod.commons" />
			<path refid="lib.prod.commonscs" />
			<path refid="lib.test" />
			<path refid="path.testng" />
		</path>

		<javac source="1.7" target="1.7" debug="true" debuglevel="lines,vars,source" nowarn="off" includeAntRuntime="no" destdir="${build.test.classes}" srcdir="${test.root}">
			<classpath refid="complete.classpath" />
			<compilerarg value="-Xlint:unchecked" />
		</javac>

		<!-- instrument the classes that should be included in test coverage -->
		<mkdir dir="${build.instrumented.classes}" />

		<!-- ensure that the original class files are not touched as we do not want to -->
		<!-- ship classes that are instrumented with cobertura to the customer -->
		<copy todir="${build.instrumented.classes}">
			<fileset dir="${build.cmr.classes}" includes="**/*.class" />
		</copy>

		<cobertura-instrument datafile="${build.qa.test.coveragedata}/cobertura.ser">
			<includeClasses regex="info.novatec.inspectit.*" />
			<excludeClasses regex="info.novatec.inspectit.*\.test.*" />
			<excludeClasses regex="info.novatec.inspectit.*\.*_Stub.*" />
			<instrumentationClasspath>
				<path location="${build.instrumented.classes}" />
			</instrumentationClasspath>
			<classpath refid="compile.classpath" />
			<classpath location="${build.instrumented.classes}" />
		</cobertura-instrument>

		<testng outputdir="${build.qa.test.testdata}" haltonfailure="${testng.haltonfailure}">
			<!-- this absolutely needs to be the first entry, else the instrumented classes are not taken but the normal ones -->
			<classpath location="${build.instrumented.classes}" />
			<classpath refid="complete.classpath" />
			<classpath refid="path.test.class" />
			<classpath refid="path.testng" />
			<classpath refid="path.cobertura" />
			<!-- this entry is necessary in order to get the spring configurations needed for the test -->
			<classpath location="${src.root}" />
			<classpath location="${test.root}" />

			<jvmarg value="-XX:-UseSplitVerifier" /> <!-- This is a workaround for Cobertura not supporting Java 7 source code features (http://sourceforge.net/tracker/index.php?func=detail&aid=3295711&group_id=130558&atid=720018) -->
			<jvmarg value="-Dnet.sourceforge.cobertura.datafile=${build.qa.test.coveragedata}/cobertura.ser" />
			<jvmarg value="-javaagent:${string.path.classmexer}" />
			<xmlfileset file="${resources.testng}/testng.xml" />
		</testng>


		<!-- create cobertura html and xml reports and link to the interesting parts -->
		<cobertura-report format="html" destdir="${build.qa.test.coveragedata}" srcdir="${src.root}" datafile="${build.qa.test.coveragedata}/cobertura.ser">
			<fileset dir="${src.root}" includes="**/*.java" />
			<fileset dir="${test.root}" includes="**/*.java" />
		</cobertura-report>
		<cobertura-report format="xml" destdir="${build.qa.test.coveragedata}" srcdir="${src.root}" datafile="${build.qa.test.coveragedata}/cobertura.ser">
			<fileset dir="${src.root}" includes="**/*.java" />
			<fileset dir="${test.root}" includes="**/*.java" />
		</cobertura-report>
		<echo file="${build.qa.test}/coverage.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=coveragedata/index.html&quot; >" />

		<!-- create html pages that link to the interesting parts -->
		<echo file="${build.qa.test}/testresults.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=testdata/index.html&quot; >" />
		<echo file="${build.qa.test}/testreport.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=testdata/emailable-report.html&quot; >" />
	</target>


	<!-- Depends on release, because the compiled classes are needed for the analysis -->
	<target name="static-analysis" depends="build">
		<!-- Prepare PDM -->
		<fileset dir="${src.root}" includes="**/*.java" excludes="**/*_Stub.java" id="pmd.fileset" />

		<!-- Prepare Checkstyle -->
		<fileset dir="${src.root}" includes="**/*.java" excludes="**/*_Stub.java" id="checkstyle.fileset"/>

		<!-- Prepare FindBugs -->
		<property name="findbugs.sourcepath" value="${src.root}" />
		<property name="findbugs.classlocation" value="${build.cmr.classes}" />
		<path id="findbugs.path" >
			<pathelement path="${build.commons.classes}" />
			<pathelement path="${build.commonscs.classes}" />
			<path refid="lib.prod"/>
			<path refid="lib.test"/>
		</path>

		<!-- Prepare CPD -->
		<fileset dir="${src.root}" includes="**/*.java" excludes="**/*_Stub.java" id="cpd.fileset"/>

		<antcall target="static-analysis-all" inheritrefs="true" />
	</target>


	<!-- *************************************************************** -->
	<!--                R E L E A S E     T A R G E T S                  -->
	<!-- *************************************************************** -->

	<target name="release" depends="build" description="--> Creates the distribution jar">
		<mkdir dir="${release.root}" />
		<mkdir dir="${build.release.root}" />
		<mkdir dir="${build.release.root.cmr}" />
		<mkdir dir="${build.scripts}" />

		<!-- Include prod libs from all project -->
		<copy todir="${build.release.root.cmr}/lib" flatten="true">
			<path refid="lib.prod" />
			<path refid="lib.prod.commons" />
			<path refid="lib.prod.commonscs" />
		</copy>

		<!-- Copy Commons and CommonsCS jars only -->
		<copy todir="${build.release.root.cmr}/lib">
			<fileset dir="${commons.build.release}" includes="*.jar" />
			<fileset dir="${commonscs.build.release}" includes="*.jar" />
		</copy>

		<!-- create a property containing all .jar files, prefix lib/, and seperated with a space -->
		<pathconvert property="libs.project" pathsep=" ">
			<mapper>
				<chainedmapper>
					<!-- remove absolute path -->
					<flattenmapper />

					<!-- add lib/ prefix -->
					<globmapper from="*" to="lib/*" />
				</chainedmapper>
			</mapper>

			<path>
				<!-- lib.home contains all jar files -->
				<fileset dir="${build.release.root.cmr}/lib/">
					<include name="**/*.jar" />
				</fileset>
			</path>
		</pathconvert>

		<jar destfile="${build.release.root.cmr}/${dist.jar.name}">
			<fileset dir="${build.cmr.classes}" includes="**/*.class" />
			<fileset dir="${src.root}" includes="**/*.xml" />
			<fileset dir="${src.root}" includes="**/*.properties" />
			<fileset dir="${src.commons}" includes="version.log" />

			<!-- define MANIFEST.MF -->
			<manifest>
				<attribute name="Main-Class" value="info.novatec.inspectit.cmr.CMR" />
				<attribute name="Class-Path" value="${libs.project}" />
			</manifest>
		</jar>

		<mkdir dir="${build.release.root.cmr}/license" />
		<copy todir="${build.release.root.cmr}/license" file="${basedir}/license/publicCerts.store" />

		<!-- Create the third party libraries textual representation -->
		<!-- The file is put at ${build.release.root.cmr}/thirdparty.txt -->
		<antcall target="-create-thirdparty-notification" />

		<!-- Create the different distributions -->
		<antcall target="-retrieve-jre-installations" />
		<antcall target="-linux-x86" />
		<antcall target="-linux-x64" />
		<antcall target="-windows-x86" />
		<antcall target="-windows-x64" />
	</target>

	<!-- Calls the release target and then the analysis targets -->
	<target name="release-and-analyze" depends="static-analysis, functional-tests, release" description="--> Calls the release target and then executes the static analysis with the functional tests" />

	<!-- *************************************************************** -->
	<!--           P R I V A T E    B U I L D     T A R G E T S          -->
	<!-- *************************************************************** -->

	<target name="-linux-x86">
		<echo file="${build.scripts}/startup.sh" message="${java.command.linux} ${java.memory.32bit} ${java.opts.32bit} ${java.opts.linux} ${java.locgc.linux} -jar ${dist.jar.name}" />
		<tar destfile="${release.root}/inspectit-cmr.linux.x86.tar.gz" compression="gzip">
			<fileset dir="${build.release.root}" />
			<tarfileset file="${build.scripts}/startup.sh" prefix="CMR" filemode="755" />
			<zipfileset src="${jvm.root}/jre7-linux-x86.zip" prefix="CMR/jre" filemode="755" />
			<zipfileset dir="${commons.basedir}/resources" prefix="CMR" includes="inspectIT-licence.pdf" />
		</tar>
		<delete file="${build.scripts}/startup.sh" failonerror="false" />
	</target>

	<target name="-linux-x64">
		<echo file="${build.scripts}/startup.sh" message="${java.command.linux} ${java.memory.64bit} ${java.opts.64bit} ${java.opts.linux} ${java.locgc.linux} -jar ${dist.jar.name}" />
		<tar destfile="${release.root}/inspectit-cmr.linux.x64.tar.gz" compression="gzip">
			<fileset dir="${build.release.root}" />
			<tarfileset file="${build.scripts}/startup.sh" prefix="CMR" filemode="755" />
			<zipfileset src="${jvm.root}/jre7-linux-x64.zip" prefix="CMR/jre" filemode="755" />
			<zipfileset dir="${commons.basedir}/resources" prefix="CMR" includes="inspectIT-licence.pdf" />
		</tar>
		<delete file="${build.scripts}/startup.sh" failonerror="false" />
	</target>

	<target name="-windows-x86">
		<echo file="${build.scripts}/startup.bat" message="${java.command.win} ${java.memory.32bit} ${java.opts.32bit} ${java.opts.win} ${java.locgc.win} -jar ${dist.jar.name}" />
		<zip destfile="${release.root}/inspectit-cmr.windows.x86.zip">
			<fileset dir="${build.release.root}" />
			<zipfileset file="${build.scripts}/startup.bat" prefix="CMR" />
			<zipfileset src="${jvm.root}/jre7-windows-x86.zip" prefix="CMR/jre" />
			<zipfileset dir="${commons.basedir}/resources" prefix="CMR" includes="inspectIT-licence.pdf" />
		</zip>
		<delete file="${build.scripts}/startup.bat" failonerror="false" />
	</target>

	<target name="-windows-x64">
		<echo file="${build.scripts}/startup.bat" message="${java.command.win} ${java.memory.64bit} ${java.opts.64bit} ${java.opts.win} ${java.locgc.win} -jar ${dist.jar.name}" />
		<zip destfile="${release.root}/inspectit-cmr.windows.x64.zip">
			<fileset dir="${build.release.root}" />
			<zipfileset file="${build.scripts}/startup.bat" prefix="CMR" />
			<zipfileset src="${jvm.root}/jre7-windows-x64.zip" prefix="CMR/jre" />
			<zipfileset dir="${commons.basedir}/resources" prefix="CMR" includes="inspectIT-licence.pdf" />
		</zip>
		<delete file="${build.scripts}/startup.bat" failonerror="false" />
	</target>

	<target name="-create-thirdparty-notification">
		<echo file="${build.release.root.cmr}/thirdparty.txt" message="The CMR uses the following third party libraries: ${line.separator} ${line.separator}
Apache Software License, 1.1 : hessian (3.1.5) ${line.separator}
Apache Software License, 2.0 : commons-logging (1.1.1), commons-lang (2.5), commons-collections (3.2), commons-codec (1.3), commons-pool (1.6), log4j (1.2.15), servlet-api (2.5),  jetty (6.1.26), jetty-util (6.1.26), spring-core (3.1.0.RELEASE), spring-context (3.1.0.RELEASE), spring-context-support (3.1.0.RELEASE), spring-beans (3.1.0.RELEASE), spring-orm (3.1.0.RELEASE), spring-tx (3.1.0.RELEASE), spring-web (3.1.0.RELEASE), spring-asm (3.1.0.RELEASE), spring-expression (3.1.0.RELEASE), spring-aop (3.1.0.RELEASE), spring-jdbc (3.1.0.RELEASE), cglib-nodep (2.2.2),  truelicense (1.29), truexml (1.29), kryo-serializers (0.22) ${line.separator}
BSD License : dom4j (1.6.1),  antlr (2.7.7), kryo (2.20), reflectasm (1.07), minlog (1.2), asm (4.0) ${line.separator}
Common Development and Distribution License (CDDL), 1.0 : jta (1.0.1B) ${line.separator}
GNU Lesser General Public License (LGPL), 2.1 : hibernate (3.5.3-Final), c3p0 (0.9.1.2) ${line.separator}
MIT License : slf4j-api (1.5.6), slf4j-log4j12 (1.5.6) ${line.separator}
Mozilla Public License (MPL), 1.1 : Javassist (3.12.0.GA), h2 (1.2.148)" />
	</target>

	<!-- *************************************************************** -->
	<!--            C L A S S M E X E R     T A R G E T S                -->
	<!-- *************************************************************** -->
	<target name="init-classmexer" depends="init-ivy">
		<ivy:settings file="${ivy.settings.dir}/ivysettings.xml" />
		<ivy:cachepath pathid="path.classmexer" organisation="classmexer" module="classmexer" revision="0.0.3" conf="default" inline="true" />
		<pathconvert property="string.path.classmexer" pathsep="">
				<path refid="path.classmexer" />
		</pathconvert>
		<echo>Using Classmexer on path: ${string.path.classmexer}</echo>
	</target>
</project>
