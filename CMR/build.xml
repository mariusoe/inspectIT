<?xml version="1.0"?>
<!-- ====================================================================== 
     inspectIT - CMR    
     Sophisticated Monitoring tool by NovaTec GmbH
     ====================================================================== -->
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="inspectIT - CMR" default="release" basedir=".">
	<description>
            Sophisticated Monitoring tool by NovaTec GmbH
    </description>

	<property file="${basedir}/build.properties" />

	<!-- classpath settings -->
	<path id="compile.classpath">
		<fileset dir="${lib.root}" includes="**/*.jar" />
		<pathelement location="${build.commons.classes}" />
	</path>

	<path id="complete.classpath">
		<!--path refid="${classpath_ref}" /-->
		<pathelement location="${build.cmr.classes}" />
		<pathelement location="${build.commons.classes}" />
		<fileset dir="${lib.root}" includes="**/*.jar" />
	</path>

	<!-- classpath for findbugs is needed because it enables to run findbugs without having a local installation -->
	<path id="findbugs.classpath">
		<fileset dir="${lib.root}" includes="**/*.jar" />
	</path>

	<!-- will be available after all dependencies are retrieved by the init target -->
	<path id="path.libs">
		<fileset dir="${lib.root}" includes="**/*.jar" />
	</path>

	<target name="clean" description="--> Cleans the project">
		<delete dir="${build.root}" />
		<delete dir="${dist.root}" />
		<delete dir="${src.generated.root}" />
	</target>

	<target name="init" description="--> Creates necessary folder structure">
		<mkdir dir="${build.root}" />
		<mkdir dir="${src.generated.root}" />
		<antcall target="init-ivy" />

		<ivy:settings file="${ivy.settings.dir}/ivysettings.xml" />
		<ivy:resolve file="${ivy.file}" />
		<ivy:retrieve pattern="${lib.root}/[conf]/[artifact].[ext]" />

		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="path.libs" />
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="path.libs" />
		<taskdef resource="checkstyletask.properties" classpathref="path.libs" />
	</target>



	<!-- *************************************************************** -->
	<!--                   B U I L D    T A R G E T S                    -->
	<!-- *************************************************************** -->
	<!-- These targets are used to build the projects that are used      -->
	<!-- to create the CMR component.                                    -->
	<!-- *************************************************************** -->

	<target name="build-commons" description="--> builds a clean distribution of the commons project and copies the classes to the local build folder">
		<mkdir dir="${build.commons.classes}" />

		<javac source="1.4" target="1.4" debug="true" fork="true" destdir="${build.commons.classes}" srcdir="${src.commons}" />
	</target>

	<target name="build" depends="init, build-commons" description="--> Compiles the sources">
		<mkdir dir="${build.cmr.generated.classes}" />
		<mkdir dir="${build.cmr.classes}" />

		<javac source="1.5" target="1.5" destdir="${build.cmr.generated.classes}" srcdir="${src.generated.root}" classpathref="compile.classpath" />
		<javac source="1.5" target="1.5" destdir="${build.cmr.classes}" srcdir="${src.root}" classpathref="compile.classpath" />

		<rmic stubversion="1.2" base="${build.cmr.generated.classes}" classpathref="complete.classpath" classname="info.novatec.inspectit.cmr.service.AgentStorageService" sourcebase="${src.generated.root}" />
		<rmic stubversion="1.2" base="${build.cmr.generated.classes}" classpathref="complete.classpath" classname="info.novatec.inspectit.cmr.service.RegistrationService" sourcebase="${src.generated.root}" />
	</target>


	<!-- *************************************************************** -->
	<!--                Q U A L I T Y     T A R G E T S                  -->
	<!-- *************************************************************** -->
	<!-- These targets are used to ensure the quality of the agent       -->
	<!-- component.                                                      -->
	<!-- *************************************************************** -->

	<!-- Depends on release, because the compiled classes are needed for the analysis -->
	<target name="static-analysis" depends="release">
		<mkdir dir="${build.qa.analysis}" />
		<mkdir dir="${build.qa.analysis.pmd}" />
		<mkdir dir="${build.qa.analysis.checkstyle}" />
		<mkdir dir="${build.qa.analysis.findbugs}" />

		<pmd maxRuleViolations="${pmd.maximum.violations}">
			<ruleset>${pmd.rules.file}</ruleset>
			<formatter type="html" toFile="${build.qa.analysis.pmd}/default_report.html" toConsole="true" />
			<formatter type="summaryhtml" toFile="${build.qa.analysis.pmd}/summary_report.html" toConsole="true" />
			<formatter type="xml" toFile="${build.qa.analysis.pmd}/pmd_results.xml" />
			<fileset dir="${src.root}">
				<include name="info/novatec/inspectit/**/*.java" />
				<exclude name="**/*_Stub.java" />
			</fileset>
			<fileset dir="${src.commons}">
				<include name="info/novatec/inspectit/**/*.java" />
				<exclude name="**/*_Stub.java" />
			</fileset>
		</pmd>
		<xslt in="${build.qa.analysis.pmd}/pmd_results.xml" style="${pmd.config.root}/pmd-report.xslt" out="${build.qa.analysis.pmd}/sortable_report.html" />
		<copy todir="${build.qa.analysis.pmd}" file="${pmd.config.root}/sorttable.js" />
		<!-- this js is used for the sortable report -->
		<echo file="${build.qa.analysis}/pmd.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=pmd/sortable_report.html&quot; >" />

		<checkstyle config="${checkstyle.config.file}" failureProperty="checkstyle.failure" failOnViolation="false" maxerrors="${checkstyle.max.errors}" maxwarnings="${checkstyle.max.warnings}">
			<formatter type="xml" tofile="${build.qa.analysis.checkstyle}/checkstyle_results.xml" />
			<fileset dir="src" includes="**/*.java" />
		</checkstyle>

		<xslt in="${build.qa.analysis.checkstyle}/checkstyle_results.xml" out="${build.qa.analysis.checkstyle}/checkstyle_report.html" style="${checkstyle.config.root}/checkstyle.xsl" />
		<echo file="${build.qa.analysis}/checkstyle.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=checkstyle/checkstyle_report.html&quot; >" />


		<!-- The path is converted to a property and enables the usage of findbugs without having a local installation-->
		<!-- See also: http://blogs.sun.com/ritzmann/entry/running_findbugs_with_ant_tasks -->
		<pathconvert property="findbugs.classpath">
			<path refid="findbugs.classpath" />
		</pathconvert>

		<findbugs output="xml" classpath="${findbugs.classpath}" outputFile="${build.qa.analysis}/findbugs/findbugs.xml" pluginlist="${lib.root}/test/findbugs.jar">
			<sourcePath path="${src.root}" />
			<class location="${build.cmr.classes}" />
			<auxClasspath>
				<pathelement path="${build.commons.classes}" />
				<fileset dir="${lib.root}" includes="**/*.jar" />
			</auxClasspath>
		</findbugs>
		<xslt in="${build.qa.analysis}/findbugs/findbugs.xml" style="${basedir}/resources/findbugs/fancy-hist.xsl" out="${build.qa.analysis}/findbugs.html" />
	</target>


	<!-- *************************************************************** -->
	<!--                R E L E A S E     T A R G E T S                  -->
	<!-- *************************************************************** -->

	<target name="release" depends="build" description="--> Creates the distribution jar">
		<mkdir dir="${release.root}" />
		<mkdir dir="${build.release.root}" />
		<mkdir dir="${build.release.root.cmr}" />
		<mkdir dir="${build.scripts}" />

		<jar destfile="${build.release.root.cmr}/${dist.jar.name}" manifest="${basedir}/resources/META-INF/MANIFEST.MF">
			<fileset dir="${build.cmr.generated.classes}" includes="**/*.class" />
			<fileset dir="${build.cmr.classes}" includes="**/*.class" />
			<fileset dir="${src.root}" includes="**/*.xml" />
			<fileset dir="${src.root}" includes="**/*.properties" />
			<fileset dir="${src.commons}" includes="version.log" />
		</jar>

		<copy todir="${build.release.root.cmr}/lib">
			<fileset dir="${lib.root}/prod" includes="**/*.jar" />
		</copy>

		<jar destfile="${build.release.root.cmr}/lib/inspectit-commons.jar" basedir="${build.commons.classes}" />

		<mkdir dir="${build.release.root.cmr}/license" />
		<copy todir="${build.release.root.cmr}/license" file="${basedir}/license/publicCerts.store" />

		<!-- Create the different distributions -->
		<antcall target="-linux-x86" />
		<antcall target="-linux-x64" />
		<antcall target="-windows-x86" />
		<antcall target="-windows-x64" />

	</target>

	<!-- *************************************************************** -->
	<!--           P R I V A T E    B U I L D     T A R G E T S          -->
	<!-- *************************************************************** -->
	<target name="-linux-x86">
		<echo file="${build.scripts}/startup.sh" message="./jre/bin/java -Xms1024m -Xmx1024m -Xmn512M -XX:MaxPermSize=128m -XX:PermSize=128m -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=60 -XX:+UseParNewGC -XX:+CMSParallelRemarkEnabled -XX:+DisableExplicitGC -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:+AggressiveOpts -XX:+UseFastAccessorMethods -XX:+UseBiasedLocking -XX:+HeapDumpOnOutOfMemoryError -jar ${dist.jar.name}" />

		<tar destfile="${release.root}/inspectit-cmr.linux.x86.tar.gz" compression="gzip">
			<fileset dir="${build.release.root}" />
			<tarfileset file="${build.scripts}/startup.sh" prefix="CMR" filemode="755" />
			<zipfileset src="${basedir}/resources/jvm/linux/x86/jre.zip" prefix="CMR/jre" filemode="755" />
		</tar>

		<delete file="${build.scripts}/startup.sh" />
	</target>

	<target name="-linux-x64">
		<echo file="${build.scripts}/startup.sh" message="./jre/bin/java -Xms2048m -Xmx2048m -Xmn1024M -XX:MaxPermSize=192m -XX:PermSize=128m -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=60 -XX:+UseParNewGC -XX:+CMSParallelRemarkEnabled -XX:+DisableExplicitGC -XX:SurvivorRatio=5 -XX:TargetSurvivorRatio=90 -XX:+AggressiveOpts -XX:+UseFastAccessorMethods -XX:+UseBiasedLocking -XX:+UseCompressedOops -XX:+HeapDumpOnOutOfMemoryError -jar ${dist.jar.name}" />

		<tar destfile="${release.root}/inspectit-cmr.linux.x64.tar.gz" compression="gzip">
			<fileset dir="${build.release.root}" />
			<tarfileset file="${build.scripts}/startup.sh" prefix="CMR" filemode="755" />
			<zipfileset src="${basedir}/resources/jvm/linux/x64/jre.zip" prefix="CMR/jre" filemode="755" />
		</tar>

		<delete file="${build.scripts}/startup.sh" />
	</target>

	<target name="-windows-x86">
		<echo file="${build.scripts}/startup.bat" message="jre\bin\java.exe -Xms1024m -Xmx1024m -Xmn512M -XX:MaxPermSize=128m -XX:PermSize=128m -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=60 -XX:+UseParNewGC -XX:+CMSParallelRemarkEnabled -XX:+DisableExplicitGC -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:+AggressiveOpts -XX:+UseFastAccessorMethods -XX:+UseBiasedLocking -XX:+HeapDumpOnOutOfMemoryError -jar ${dist.jar.name}" />

		<zip destfile="${release.root}/inspectit-cmr.windows.x86.zip">
			<fileset dir="${build.release.root}" />
			<zipfileset file="${build.scripts}/startup.bat" prefix="CMR" />
			<zipfileset src="${basedir}/resources/jvm/windows/x86/jre.zip" prefix="CMR/jre" />
		</zip>

		<delete file="${build.scripts}/startup.bat" />
	</target>

	<target name="-windows-x64">
		<!-- T O D O -->
	</target>


	<!-- *************************************************************** -->
	<!--                I V Y     T A R G E T S   		                 -->
	<!-- *************************************************************** -->
	<target name="init-ivy" unless="skip.download">
		<mkdir dir="${ivy.jar.dir}" />
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<echo message="Installing ivy version: ${ivy.install.version}" />
		<get src="${ivy.download.url}" dest="${ivy.jar.file}" usetimestamp="true" />

		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<target name="clean-ivy" depends="init-ivy" description="--> clean the ivy installation and the ivy cache">
		<!--  The ivy cache is cleaned and the install directory is deleted -->
		<ivy:cleancache />
		<delete dir="${ivy.jar.dir}" />
	</target>
</project>
