<?xml version="1.0"?>
<!-- ======================================================================
		inspectIT - Commons Build Targets
		Sophisticated Monitoring tool by NovaTec GmbH
		====================================================================== -->
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="CommonTargets" basedir=".">
	<description>
		This build file has the common targets used by all other inspectIT components
	</description>

	<dirname property="commontargets.basedir" file="${ant.file.CommonTargets}" />
	<property file="${commontargets.basedir}/common-targets.properties" />

	<!-- *************************************************************** -->
	<!--                I N I T     T A R G E T S  	                     -->
	<!-- *************************************************************** -->

	<target name="init-static-analysis" if="build.qa.analysis" depends="init-ivy">
		<mkdir dir="${build.qa.analysis}" />

		<ivy:settings file="${ivy.settings.file}" />
		<!-- needed for Checkstyle, PMD & Findbugs -->
		<ivy:cachepath pathid="path.checkstyle" organisation="com.puppycrawl.tools" module="checkstyle" revision="5.6" conf="default" inline="true" />
		<ivy:cachepath pathid="path.pmd" organisation="net.sourceforge.pmd" module="pmd" revision="5.0.5" conf="default" inline="true" />
		<ivy:cachepath pathid="path.findbugs" organisation="com.google.code.findbugs" module="findbugs-ant" revision="2.0.0" conf="default" inline="true" />
		<!-- Ingnore path missing warnings -->
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="path.pmd" />
		<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" classpathref="path.pmd" />
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="path.findbugs" />
		<taskdef resource="checkstyletask.properties" classpathref="path.checkstyle" />
	</target>

	<target name="init-ftp-task" depends="init-ivy">
		<ivy:settings file="${ivy.settings.file}" />
		<ivy:cachepath pathid="path.commonsnet" organisation="commons-net" module="commons-net" revision="2.0" conf="default" inline="true" />
		<ivy:cachepath pathid="path.oro" organisation="oro" module="oro" revision="2.0.8" conf="default" inline="true" />

		<!-- This is a workaround to fix the problem that the FTP task is loaded by a different classloader. -->
		<!-- This must not be changed, unless you know what you are doing. -->
		<path id="wptg.classpath">
			<path refid="path.commonsnet" />
			<path refid="path.oro" />
			<fileset dir="${ant.library.dir}" includes="ant-commons-net.jar" />
		</path>
		<classloader classpathref="wptg.classpath" parentFirst="false" />
		<taskdef name="wptg-ftp" classname="org.apache.tools.ant.taskdefs.optional.net.FTP" loaderref="ant.coreLoader" />
	</target>

	<target name="init-antcontrib" depends="init-ivy">
		<!-- This is a workaround to fix the problem that the all ant-contrlib tasks are loaded by a different classloader. -->
		<!-- This must not be changed, unless you know what you are doing. -->

		<ivy:cachepath pathid="path.antcontrib" organisation="ant-contrib" module="ant-contrib" revision="1.0b3" conf="default" inline="true" />
		<path id="ant-contrib.classpath">
			<path refid="path.antcontrib" />
		</path>
		<classloader classpathref="ant-contrib.classpath" parentFirst="false" />
		<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="ant-contrib.classpath" />
	</target>

	<target name="init-functional-tests">
		<ivy:settings file="${ivy.settings.file}" />
		<!-- needed for TestNG & Cobertura -->
		<ivy:cachepath pathid="path.testng" organisation="org.testng" module="testng" revision="6.8.7" conf="default" inline="true" />
		<ivy:cachepath pathid="path.cobertura" organisation="net.sourceforge.cobertura" module="cobertura" revision="1.9.4.1" conf="default" inline="true" />

		<taskdef name="testng" classpathref="path.testng" classname="org.testng.TestNGAntTask" />
		<taskdef name="cobertura-instrument" classname="net.sourceforge.cobertura.ant.InstrumentTask" classpathref="path.cobertura" />
		<taskdef name="cobertura-merge" classname="net.sourceforge.cobertura.ant.MergeTask" classpathref="path.cobertura" />
		<taskdef name="cobertura-report" classname="net.sourceforge.cobertura.ant.ReportTask" classpathref="path.cobertura" />
	</target>

	<!-- *************************************************************** -->
	<!--                I V Y     T A R G E T S   		                 -->
	<!-- *************************************************************** -->

	<target name="checkForIvy">
		<condition property="skipIvyDownload">
			<available file="${ivy.jar.file}" property="skipIvyDownload" />
		</condition>
	</target>

	<target name="init-ivy" depends="checkForIvy" unless="skipIvyDownload">
		<mkdir dir="${ivy.jar.dir}" />
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<echo message="Installing ivy version: ${ivy.install.version}" />
		<get src="${ivy.download.url}" dest="${ivy.jar.file}" usetimestamp="true" />

		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<target name="clean-ivy" depends="init-ivy" description="--> clean the ivy installation and the ivy cache">
		<!--  The ivy cache is cleaned and the install directory is deleted -->
		<ivy:cleancache />
		<delete dir="${ivy.jar.dir}" />
	</target>

	<!-- *************************************************************** -->
	<!--                         T E S T   N G                           -->
	<!-- *************************************************************** -->

	<!-- This macro executes the TestNG tests and instruments the classes under test for the Corbertura report -->
	<!-- All attributes and elements must be set for the macro to correctly execute -->
	<macrodef name="execute-testng">
		<attribute name="src.root" description="Main source folder" />
		<attribute name="test.root" description="Test source folder" />
		<attribute name="build.qa.test" />
		<attribute name="build.qa.test.testdata" description="Folder where test data will be placed" />
		<attribute name="build.qa.test.coveragedata" description="Folder where coverage data will be placed" />
		<attribute name="build.test.classes" description="Destination folder for building test classes" />
		<attribute name="build.instrumented.classes" description="Destination folder for cobertura instrumented classes" />
		<attribute name="test.workingdir" description="The directory where the ant task should change to before running TestNG." />
		<attribute name="test.javac.source" description="Source version of the test classes for javac" />
		<attribute name="test.javac.target" description="Target version of the test classes for javac" />
		<attribute name="test.targetsuite" description="File that describes test suite to be executed." />
		<attribute name="test.vmargs" description="Additional JVM arguments to pass when executing tests." />
		<attribute name="test.haltonfailure" description="Should test halt on failure." />
		<element name="compile.classpath" description="Complete class path meaning test classes, plus all classes used in the classes to be tested." />
		<element name="test.compile.classpath" description="Class path needed to compile the test classes." />
		<element name="test.classes-to-instrument" description="Which class should be instrumented by Corbertura." />
		<sequential>
			<mkdir dir="@{build.qa.test.testdata}" />
			<mkdir dir="@{build.qa.test.coveragedata}" />
			<mkdir dir="@{build.test.classes}" />
			<mkdir dir="@{build.instrumented.classes}" />

			<javac source="@{test.javac.source}" target="@{test.javac.target}" debug="true" debuglevel="lines,vars,source" nowarn="off" includeAntRuntime="no" destdir="@{build.test.classes}" srcdir="@{test.root}">
				<test.compile.classpath />
				<classpath refid="path.testng" />
				<compilerarg value="-Xlint:unchecked" />
			</javac>

			<path id="test.classes">
				<pathelement location="@{build.test.classes}" />
			</path>

			<!-- instrument the classes that should be included in test coverage -->
			<!-- ensure that the original class files are not touched as we do not want to -->
			<!-- ship classes that are instrumented with cobertura to the customer -->
			<copy todir="@{build.instrumented.classes}">
				<test.classes-to-instrument />
			</copy>

			<cobertura-instrument datafile="@{build.qa.test.coveragedata}/cobertura.ser">
				<includeClasses regex="info.novatec.inspectit.*" />
				<excludeClasses regex="info.novatec.inspectit.*\.test.*" />
				<excludeClasses regex="info.novatec.inspectit.*\.*_Stub.*" />
				<instrumentationClasspath>
					<path location="@{build.instrumented.classes}" />
				</instrumentationClasspath>
				<compile.classpath />
				<classpath location="@{build.instrumented.classes}" />
			</cobertura-instrument>
			
			<echo message="Starting TestNG with following JVM arguments: -XX:-UseSplitVerifier -Dnet.sourceforge.cobertura.datafile=@{build.qa.test.coveragedata}/cobertura.ser @{test.vmargs}"/>

			<testng outputdir="@{build.qa.test.testdata}" haltonfailure="@{test.haltonfailure}" workingDir="@{test.workingDir}">
				<!-- this absolutely needs to be the first entry, else the instrumented classes are not taken but the normal ones -->
				<classpath location="@{build.instrumented.classes}" />
				<test.compile.classpath/>
				<classpath refid="test.classes"/>
				<classpath refid="path.testng" />
				<classpath refid="path.cobertura" />
				<!-- this entry is necessary in order to get the spring configurations needed for the test -->
				<classpath location="@{src.root}" />
				<classpath location="@{test.root}" />

				<jvmarg line="-XX:-UseSplitVerifier -Dnet.sourceforge.cobertura.datafile='@{build.qa.test.coveragedata}/cobertura.ser' @{test.vmargs}" />
				<xmlfileset file="@{test.targetsuite}" />
			</testng>


			<!-- create cobertura html and xml reports and link to the interesting parts -->
			<cobertura-report format="html" destdir="@{build.qa.test.coveragedata}" srcdir="@{src.root}" datafile="@{build.qa.test.coveragedata}/cobertura.ser">
				<fileset dir="@{src.root}" includes="**/*.java" />
				<fileset dir="@{test.root}" includes="**/*.java" />
			</cobertura-report>
			<cobertura-report format="xml" destdir="@{build.qa.test.coveragedata}" srcdir="@{src.root}" datafile="@{build.qa.test.coveragedata}/cobertura.ser">
				<fileset dir="@{src.root}" includes="**/*.java" />
				<fileset dir="@{test.root}" includes="**/*.java" />
			</cobertura-report>
			<echo file="@{build.qa.test}/coverage.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=coveragedata/index.html&quot; >" />

			<!-- create html pages that link to the interesting parts -->
			<echo file="@{build.qa.test}/testresults.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=testdata/index.html&quot; >" />
			<echo file="@{build.qa.test}/testreport.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=testdata/emailable-report.html&quot; >" />
		</sequential>
	</macrodef>

	<!-- *************************************************************** -->
	<!--         S T A T I C     A N A L Y S I S     T A R G E T S  	 -->
	<!-- *************************************************************** -->

	<!-- P M D -->
	<macrodef name="execute-pmd">
		<attribute name="build.qa.analysis" description="Main QA folder" />
		<attribute name="build.qa.analysis.pmd" description="PMD QA folder" />
		<element name="pmd.fileset" description="File set to analyse" />
		<sequential>
			<echo message="Analyse Code with tool: PMD" level="info" />
			<mkdir dir="@{build.qa.analysis.pmd}" />
			<pmd failuresPropertyName="pmd.failure" failOnRuleViolation="false" rulesetfiles="${pmd.rules.file}">
				<formatter type="html" toFile="@{build.qa.analysis.pmd}/default_report.html" toConsole="true" />
				<formatter type="summaryhtml" toFile="@{build.qa.analysis.pmd}/summary_report.html" toConsole="true" />
				<formatter type="xml" toFile="@{build.qa.analysis.pmd}/pmd_results.xml" />
				<pmd.fileset />
			</pmd>
			<xslt in="@{build.qa.analysis.pmd}/pmd_results.xml" style="${pmd.report.file}" out="@{build.qa.analysis.pmd}/sortable_report.html" />
			<copy todir="@{build.qa.analysis.pmd}" file="${pmd.sortable.file}" />
			<!-- this js is used for the sortable report -->
			<echo file="@{build.qa.analysis}/pmd.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=pmd/sortable_report.html&quot; >" />
		</sequential>
	</macrodef>

	<!-- C h e c k s t y l e -->
	<macrodef name="execute-checkstyle">
		<attribute name="build.qa.analysis" description="Main QA folder" />
		<attribute name="build.qa.analysis.checkstyle" description="Checkstyle QA folder" />
		<element name="checkstyle.fileset" description="File set to analyse" />
		<sequential>
			<echo message="Analyse Code with tool: Checkstyle" level="info" />
			<mkdir dir="@{build.qa.analysis.checkstyle}" />
			<checkstyle config="${checkstyle.config.file}" failureProperty="checkstyle.failure" failOnViolation="false" maxerrors="${checkstyle.max.errors}" maxwarnings="${checkstyle.max.warnings}">
				<formatter type="xml" tofile="@{build.qa.analysis.checkstyle}/checkstyle_results.xml" />
				<checkstyle.fileset />
			</checkstyle>

			<xslt in="@{build.qa.analysis.checkstyle}/checkstyle_results.xml" out="@{build.qa.analysis.checkstyle}/checkstyle_report.html" style="${checkstyle.report.file}" />
			<echo file="@{build.qa.analysis}/checkstyle.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=checkstyle/checkstyle_report.html&quot; >" />
		</sequential>
	</macrodef>

	<!-- F i n d B u g s -->
	<macrodef name="execute-findbugs">
		<attribute name="build.qa.analysis" description="Main QA folder" />
		<attribute name="build.qa.analysis.findbugs" description="Findbugs QA folder" />
		<attribute name="findbugs.sourcepath" description="Location to find source files" />
		<attribute name="findbugs.classlocation" description="Location to the compliled classes" />
		<element name="findbugs.path" description="Path to use when running Findbugs" />
		<sequential>
			<!-- The path is converted to a property and enables the usage of findbugs without having a local installation-->
			<!-- See also: http://blogs.sun.com/ritzmann/entry/running_findbugs_with_ant_tasks -->
			<pathconvert property="findbugs.classpath">
				<path refid="path.findbugs" />
			</pathconvert>

			<echo message="Analyse Code with tool: FindBugs" level="info" />
			<mkdir dir="@{build.qa.analysis.findbugs}" />
			<findbugs output="xml:withMessages" classpath="${findbugs.classpath}" includefilter="${findbugs.config.include}" excludefilter="${findbugs.config.exclude}" outputFile="@{build.qa.analysis.findbugs}/findbugs.xml" pluginlist="findbugs.jar" warningsProperty="findbugs.failure">
				<sourcePath path="@{findbugs.sourcepath}" />
				<class location="@{findbugs.classlocation}" />
				<auxClasspath>
					<findbugs.path />
				</auxClasspath>
			</findbugs>
			<xslt in="@{build.qa.analysis.findbugs}/findbugs.xml" style="${findbugs.config.fancy-hist}" out="@{build.qa.analysis}/findbugs.html" />
		</sequential>
	</macrodef>

	<!-- C P D -->
	<macrodef name="execute-cpd">
		<attribute name="build.qa.analysis.cpd" description="CPD QA folder" />
		<element name="cpd.fileset" description="File set to analyse" />
		<sequential>
			<echo message="Analyse Code with tool: CPD" level="info" />
			<mkdir dir="@{build.qa.analysis.cpd}" />
			<cpd format="xml" language="java" minimumTokenCount="100" outputFile="@{build.qa.analysis.cpd}/cpd.xml">
				<cpd.fileset />
			</cpd>
		</sequential>
	</macrodef>

	<!-- Target that is checking for warnings from SA tools -->
	<target name="static-analysis-fail-on-warnings" depends="init-antcontrib">
		<if>
			<isset property="pmd.failure" />
			<then>
				<echo message="WARNING: PMD warnings were found, please fix these warnings. Have a look at ${build.qa.analysis}/pmd.html" />
			</then>
		</if>
		<if>
			<isset property="checkstyle.failure" />
			<then>
				<echo message="WARNING: Checkstyle warnings were found, please fix these warnings. Have a look at ${build.qa.analysis}/checkstyle.html" />
			</then>
		</if>
		<if>
			<isset property="findbugs.failure" />
			<then>
				<echo message="WARNING: Findbugs warnings were found, please fix these warnings. Have a look at ${build.qa.analysis}/findbugs.html" />
			</then>
		</if>
		<if>
			<or>
				<isset property="pmd.failure" />
				<isset property="checkstyle.failure" />
				<isset property="findbugs.failure" />
			</or>
			<then>
				<fail message="Failing the build since the static analysis tools have reported warnings." />
			</then>
		</if>
	</target>


	<!-- *************************************************************** -->
	<!--           			J V M    T A R G E T S      			     -->
	<!-- *************************************************************** -->

	<target name="check-retrieve-jre-installations">
		<condition property="can-retrieve-jre-installations">
			<and>
				<isset property="jvm.list" />
				<isset property="jvm.root" />
			</and>
		</condition>
	</target>

	<target name="-retrieve-jre-installations" depends="check-retrieve-jre-installations,init-antcontrib,init-ftp-task" unless="skip.jre.download" if="can-retrieve-jre-installations">
		<echo message="Retrieving JVMs ${jvm.list} to dir ${jvm.root} from remote dir ${jvm.remotedir}" />
		<foreach list="${jvm.list}" param="jvmFile" target="-get-jvm-instalation" />
	</target>

	<target name="-get-jvm-instalation" if="jvmFile">
		<execute-ftpdownload file="${jvmFile}" download.dir="${jvm.root}" download.ftp.remotedir="${jvm.remotedir}" download.notify.target="-notify-about-jre-update"/>
	</target>

	<target name="-notify-about-jre-update">
		<echo message="-------------------------------------------------------------" />
		<echo message="INFO: A newer JRE Version was found than currently available." />
		<echo message="--------------------------------------------------------------" />
		<echo message="The old version is going to be deleted and updated with the " />
		<echo message="newer version found on the FTP server." />
		<echo message="In case you don't want to update the JRE, you can skip " />
		<echo message="the whole update process by starting the Build again with the " />
		<echo message="option: -Dskip.jre.download=true" />
		<echo message="-------------------------------------------------------------" />
		<input>Press Return key to continue and to overwrite the JRE: ${file}</input>
	</target>



	<!-- *************************************************************** -->
	<!--   		 D O W N L O A D   J A V A 1.5   R U N T I M E    	     -->
	<!-- *************************************************************** -->

	<!-- Allows to download the java1.5 runtime. It is necessary to define the variable download.dir before calling this target! -->
	<!-- Example: <var name="download.dir" value="C:\tmp" /> -->
	<target name="retrieve-java1.5-runtime" description="Downloads the java 1.5 rt.jar" depends="init-antcontrib,init-ftp-task" >
		<execute-ftpdownload file="${ftp.internal.java15runtime.file}" download.dir="${download.dir}" download.ftp.remotedir="${ftp.internal.java15runtime.path}" download.notify.target="-notify-about-java-rt-update"/>
		<condition property="should-unpack-java1.5-runtime">
			<or>
				<isset property="download.executed.${ftp.internal.java15runtime.file}" />
				<not>
					<available file="${download.dir}/${ftp.internal.java15runtime.file}" />
				</not>
			</or>
		</condition>
		<if>
			<istrue value="${should-unpack-java1.5-runtime}"/>
			<then>
				<unzip src="${download.dir}/${ftp.internal.java15runtime.file}.zip" dest="${download.dir}" />
			</then>
		</if>
	</target>

	<target name="-notify-about-java-rt-update">
		<echo message="--------------------------------------------------------------------------" />
		<echo message="INFO: A newer Java 1.5 Runtime Version was found than currently available." />
		<echo message="--------------------------------------------------------------------------" />
	</target>

	<!-- *************************************************************** -->
	<!--   		 D O W N L O A D   &   M D 5    T A R G E T S      	     -->
	<!-- *************************************************************** -->

	<macrodef name="execute-ftpdownload">
		<attribute name="file" description="Name of file to download" />
		<attribute name="download.dir" description="Dir to save file to" />
		<attribute name="download.ftp.remotedir" description="Remote folder where file could be found" />
		<attribute name="download.notify.target" description="Nofity target to call when MD5 changes" />
		<sequential>
			<property name="zip.file" value="@{file}.zip" />
			<property name="md5.file" value="@{file}.md5" />
			<condition property="download-ok">
				<and>
					<available file="@{download.dir}/${zip.file}" />
					<available file="@{download.dir}/${md5.file}" />
				</and>
			</condition>

			<if>
				<isfalse value="${download-ok}"/>
				<then>
					<echo message="Downloading ${md5.file} from ${ftp.server} and remote dir @{download.ftp.remotedir}" />
					<wptg-ftp server="${ftp.server}" verbose="true" password="${ftp.pw}" userid="${ftp.user}" action="get" remotedir="@{download.ftp.remotedir}" newer="true" retriesAllowed="5" passive="true">
						<fileset dir="@{download.dir}/tmp">
							<include name="${md5.file}" />
						</fileset>
					</wptg-ftp>

					<!-- download the JRE only if it is not already locally available -->
					<available file="@{download.dir}/${zip.file}" property="download-file" value="true" />
					<if>
						<isfalse value="${download-file}" />
						<then>
							<echo message="Downloading ${zip.file}" />
							<wptg-ftp server="${ftp.server}" verbose="true" password="${ftp.pw}" userid="${ftp.user}" action="get" remotedir="@{download.ftp.remotedir}" newer="true" retriesAllowed="5" passive="true">
								<fileset dir="@{download.dir}/tmp">
									<include name="${zip.file}" />
								</fileset>
							</wptg-ftp>
							<property name="download.executed.@{file}" value="true" />
						</then>
						<else>
							<echo message="${zip.file} already locally available, so skipping download." />
						</else>
					</if>
				</then>
			</if>

			<condition property="md5-ok">
				<isset property="${zip.file}.isValid" />
			</condition>

			<if>
				<isfalse value="${md5-ok}" />
				<then>
					<trycatch>
						<try>
							<!-- the valid md5 value specified in the md5 file -->
							<loadfile srcFile="@{download.dir}/tmp/${md5.file}" property="md5.valid">
								<!-- need to filter whitespace in the md5sum -->
								<filterchain>
									<striplinebreaks />
									<tokenfilter>
										<stringtokenizer />
										<replaceregex pattern="${zip.file}" replace="" />
									</tokenfilter>
									<tokenfilter>
										<trim />
									</tokenfilter>
								</filterchain>
							</loadfile>

							<!-- the actual md5 value -->
							<checksum file="@{download.dir}/${zip.file}" property="md5.actual" />
							<!-- compare them -->
							<condition property="md5.isValid">
								<equals arg1="${md5.valid}" arg2="${md5.actual}" />
							</condition>

							<if>
								<istrue value="${md5.isValid}" />
								<then />
								<else>
									<!-- updates where found, so notify the user -->
									<echo message="${zip.file}: Different MD5 checksum !!!" />
									<echo message="-> expected: ${md5.valid}" />
									<echo message="-> actual  : ${md5.actual}" />
									<!-- rename the file to indicate that it is a newer version -->

									<antcall target="@{download.notify.target}" />
									<echo message="Downloading ${zip.file}" />
									<wptg-ftp server="${ftp.server}" verbose="true" password="${ftp.pw}" userid="${ftp.user}" action="get" remotedir="@{download.ftp.remotedir}" newer="true" retriesAllowed="5" passive="true">
										<fileset dir="@{download.dir}/tmp">
											<include name="${zip.file}" />
										</fileset>
									</wptg-ftp>
									<move file="@{download.dir}/tmp/${zip.file}" tofile="@{download.dir}/tmp/@{file}.newer-version.zip" overwrite="true" failonerror="true" />
									<delete file="@{download.dir}/${zip.file}" failonerror="false" />
									<move file="@{download.dir}/tmp/@{file}.newer-version.zip" tofile="@{download.dir}/${zip.file}" failonerror="true" />
									<property name="download.executed.@{file}" value="true" />
								</else>
							</if>
						</try>
						<catch>
							<!-- the file was not there in the first place, so just put it into the correct folder -->
							<echo message="${zip.file} was not available, so moving it to the correct location." />
							<move file="@{download.dir}/tmp/${zip.file}" tofile="@{download.dir}/${zip.file}" overwrite="true" failonerror="true" />
						</catch>
					</trycatch>
				</then>
			</if>

			<!-- delete tmp folder -->
			<delete dir="@{download.dir}/tmp" failonerror="false" />
		</sequential>
	</macrodef>

</project>