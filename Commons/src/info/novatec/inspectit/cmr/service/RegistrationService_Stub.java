// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package info.novatec.inspectit.cmr.service;

public final class RegistrationService_Stub
    extends java.rmi.server.RemoteStub
    implements info.novatec.inspectit.cmr.service.IRegistrationService
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_addSensorTypeToMethod_0;
    private static java.lang.reflect.Method $method_registerMethodIdent_1;
    private static java.lang.reflect.Method $method_registerMethodSensorTypeIdent_2;
    private static java.lang.reflect.Method $method_registerPlatformIdent_3;
    private static java.lang.reflect.Method $method_registerPlatformSensorTypeIdent_4;
    
    static {
	try {
	    $method_addSensorTypeToMethod_0 = info.novatec.inspectit.cmr.service.IRegistrationService.class.getMethod("addSensorTypeToMethod", new java.lang.Class[] {long.class, long.class});
	    $method_registerMethodIdent_1 = info.novatec.inspectit.cmr.service.IRegistrationService.class.getMethod("registerMethodIdent", new java.lang.Class[] {long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.util.List.class, java.lang.String.class, int.class});
	    $method_registerMethodSensorTypeIdent_2 = info.novatec.inspectit.cmr.service.IRegistrationService.class.getMethod("registerMethodSensorTypeIdent", new java.lang.Class[] {long.class, java.lang.String.class});
	    $method_registerPlatformIdent_3 = info.novatec.inspectit.cmr.service.IRegistrationService.class.getMethod("registerPlatformIdent", new java.lang.Class[] {java.util.List.class, java.lang.String.class, java.lang.String.class});
	    $method_registerPlatformSensorTypeIdent_4 = info.novatec.inspectit.cmr.service.IRegistrationService.class.getMethod("registerPlatformSensorTypeIdent", new java.lang.Class[] {long.class, java.lang.String.class});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public RegistrationService_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of addSensorTypeToMethod(long, long)
    public void addSensorTypeToMethod(long $param_long_1, long $param_long_2)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_addSensorTypeToMethod_0, new java.lang.Object[] {new java.lang.Long($param_long_1), new java.lang.Long($param_long_2)}, -7305307993338088686L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of registerMethodIdent(long, String, String, String, List, String, int)
    public long registerMethodIdent(long $param_long_1, java.lang.String $param_String_2, java.lang.String $param_String_3, java.lang.String $param_String_4, java.util.List $param_List_5, java.lang.String $param_String_6, int $param_int_7)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_registerMethodIdent_1, new java.lang.Object[] {new java.lang.Long($param_long_1), $param_String_2, $param_String_3, $param_String_4, $param_List_5, $param_String_6, new java.lang.Integer($param_int_7)}, 1082602464377720076L);
	    return ((java.lang.Long) $result).longValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of registerMethodSensorTypeIdent(long, String)
    public long registerMethodSensorTypeIdent(long $param_long_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_registerMethodSensorTypeIdent_2, new java.lang.Object[] {new java.lang.Long($param_long_1), $param_String_2}, -7114907969267523703L);
	    return ((java.lang.Long) $result).longValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of registerPlatformIdent(List, String, String)
    public long registerPlatformIdent(java.util.List $param_List_1, java.lang.String $param_String_2, java.lang.String $param_String_3)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_registerPlatformIdent_3, new java.lang.Object[] {$param_List_1, $param_String_2, $param_String_3}, 6675647020022093338L);
	    return ((java.lang.Long) $result).longValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of registerPlatformSensorTypeIdent(long, String)
    public long registerPlatformSensorTypeIdent(long $param_long_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_registerPlatformSensorTypeIdent_4, new java.lang.Object[] {new java.lang.Long($param_long_1), $param_String_2}, -7661012404724813170L);
	    return ((java.lang.Long) $result).longValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
