<?xml version="1.0"?>
<!-- ======================================================================
		inspectIT - JMeter Sampler
		JMeter Sampler to loadtest the CMR.
		
		The build provides targets that will not build the dependent projects (e.g. Commons
		CommonsCS and inspectIT). These target should be used when integrating the project
		with continuous integration to reduce the time needed to build this project. Especially
		the inspectIT project will increase the runtime.
		====================================================================== -->
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="inspectITJMeter" default="init" basedir=".">
	<description>
		Sophisticated Monitoring tool by NovaTec GmbH
	</description>

	<property file="${basedir}/build.properties" />

	<import file="${build.common-targets.file}" />

	<path id="path.test.class">
		<pathelement location="${build.test.classes}" />
	</path>

	<path id="compile.classpath.overwrite">
		<pathelement location="${build.commons.classes}" />
		<pathelement location="${build.commonscs.classes}" />
		<pathelement location="${build.inspectit.classes}" />
		<path refid="lib.prod" />
	</path>

	<path id="compile.classpath">
		<!-- this one needs to be first here! -->
		<pathelement location="${build.overwrite.classes}" />
		<pathelement location="${build.commons.classes}" />
		<pathelement location="${build.commonscs.classes}" />
		<pathelement location="${build.inspectit.classes}" />
		<path refid="lib.prod" />
		<path refid="lib.jmeter" />
	</path>

	<target name="clean">
		<delete dir="${build.root}" />
		<delete dir="${release.root}" />
	</target>

	<target name="clean-dependencies">
		<ant antfile="${build.commonscs.file}" target="clean" inheritAll="false" useNativeBasedir="true" />
		<ant antfile="${build.commons.file}" target="clean" inheritAll="false" useNativeBasedir="true" />
		<ant antfile="${build.inspectit.file}" target="clean" inheritAll="false" useNativeBasedir="true" />
	</target>

	<target name="init" depends="init-ivy" description="--> Creates necessary folder structure">
		<mkdir dir="${build.root}" />
		<mkdir dir="${release.root}" />

		<ivy:settings file="${ivy.settings.file}" />
		<ivy:resolve file="${ivy.file}" />

		<ivy:cachepath pathid="lib.prod" conf="prod" />
		<ivy:cachepath pathid="lib.test" conf="test" />
		<ivy:cachepath pathid="lib.jmeter" conf="jmeter" />

		<ivy:resolve file="${ivy.file.inspectit}" />
		<ivy:cachepath pathid="lib.prod.inspectit" conf="osgi" file="${ivy.file.inspectit}" description="necessary libraries to run inspectIT UI" />
		<ivy:cachefileset setid="set.prod.inspectit" conf="osgi" file="${ivy.file.inspectit}" />

		<ivy:resolve file="${ivy.file.commons}" />
		<ivy:cachepath pathid="lib.prod.commons" conf="prod" file="${ivy.file.commons}" />
		<ivy:cachefileset setid="set.prod.commons" conf="prod" file="${ivy.file.commons}" />

		<ivy:resolve file="${ivy.file.commonscs}" />
		<ivy:cachepath pathid="lib.prod.commonscs" conf="prod" file="${ivy.file.commonscs}" />
		<ivy:cachefileset setid="set.prod.commonscs" conf="prod" file="${ivy.file.commonscs}" />
	</target>

	<target name="build" depends="init" description="--> Compiles the sources">
		<!-- Note that release of Commons is not neccesary because it will be called when releasing the CommonsCS -->
		<!-- Also note that the inspectIT build cleans the release of Commons and CommonsCS and only builds the plugin versions, thus  -->
		<!-- inspectIT.release must run first -->
		<ant target="build-inspectit" />
		<ant target="release-commonscs" />
		<ant target="build-no-dep" />
	</target>

	<target name="build-no-dep" depends="init" description="--> Compiles the sources">
		<mkdir dir="${build.classes.root}" />
		<mkdir dir="${build.overwrite.classes}" />

		<javac source="1.7" target="1.7" debug="true" debuglevel="lines,vars,source" destdir="${build.overwrite.classes}" srcdir="${overwrite.src.root}" classpathref="compile.classpath.overwrite" includeAntRuntime="no" />

		<javac source="1.7" target="1.7" debug="true" debuglevel="lines,vars,source" destdir="${build.classes.root}" srcdir="${src.root}" classpathref="compile.classpath" includeAntRuntime="no" />

		<copy todir="${build.classes.root}">
			<fileset dir="${src.root}" includes="**/*.xml" />
		</copy>

		<copy tofile="${build.classes.root}/spring-context-model.xml" file="${build.inspectit.spring.context.model}" failonerror="true" description="copies the spring config, if this is not copied we need to fail." />
	</target>

	<target name="release-no-dep-build" depends="build-no-dep" description="packages without building the dependent projects, optimized for integration process">
		<ant target="release-internal" inheritrefs="true" />
	</target>

	<target name="release" depends="build" description="packages the jmeter samplers with all necessary classes and libs">
		<ant target="release-internal" inheritrefs="true" />
	</target>

	<target name="release-internal" description="packages the jmeter samplers with all necessary classes and libs">
		<mkdir dir="${build.release.root}" />
		<mkdir dir="${build.release.sampler}" />
		<mkdir dir="${build.release.dependencies}" />

		<!-- package the inspectIT projects jar and exchange the InspectIT class, move to temp dependencies. -->
		<delete dir="${build.release.root}/tmp" />
		<mkdir dir="${build.release.root}/tmp" />
		<copy todir="${build.release.root}/tmp">
			<fileset dir="${build.inspectit.classes}" />
		</copy>
		<echo message="copying overwritten files...">
		</echo>
		<copy todir="${build.release.root}/tmp" overwrite="true" failonerror="true" verbose="yes">
			<fileset dir="${build.overwrite.classes}" includes="**/*.class" />
		</copy>
		<jar destfile="${build.release.dependencies}/inspectit.jar" basedir="${build.release.root}/tmp" />
		<delete dir="${build.release.root}/tmp" />

		<!-- move commons and commonscs releases -->
		<copy todir="${build.release.dependencies}">
			<fileset dir="${commonscs.build.release}" includes="**/*.jar" />
			<fileset dir="${commons.build.release}" includes="**/*.jar" />
		</copy>

		<!-- package the dependencies to run inspectIT -->
		<copy todir="${build.release.dependencies}" flatten="true">
			<fileset refid="set.prod.inspectit" />
			<fileset refid="set.prod.commons" />
			<fileset refid="set.prod.commonscs" />
		</copy>

		<!-- package the sampler -->
		<jar destfile="${build.release.sampler}/inspectit-jmeter.jar" basedir="${build.classes.root}" />
	</target>

	<target name="release-and-analyze" depends="release, functional-tests, static-analysis" />
	<target name="release-and-analyze-no-dep-build" depends="release-no-dep-build, functional-tests-no-dep-build, static-analysis-no-dep-build" />


	<target name="release-commonscs" description="--> call the release of the commonscs project">
		<ant antfile="${build.commonscs.file}" target="release" inheritAll="false" useNativeBasedir="true" />
	</target>

	<target name="build-inspectit" description="--> call the release of the inspectit project">
		<ant antfile="${build.inspectit.file}" target="pdebuild" inheritAll="false" useNativeBasedir="true" />
	</target>

	<!-- *************************************************************** -->
	<!--                Q U A L I T Y     T A R G E T S                  -->
	<!-- *************************************************************** -->
	<!-- These targets are used to ensure the quality of the agent       -->
	<!-- component.                                                      -->
	<!-- *************************************************************** -->

	<path id="complete.classpath">
		<pathelement location="${build.overwrite.classes}" />
		<pathelement location="${build.inspectit.classes}" />
		<pathelement location="${build.classes.root}" />
		<fileset dir="${commons.build.release}" includes="*.jar" />
		<fileset dir="${commonscs.build.release}" includes="*.jar" />
		<path refid="lib.prod" />
		<path refid="lib.test" />
		<path refid="lib.jmeter" />
		<path refid="path.testng" />
	</path>

	<target name="local-test-execute" depends="init, init-functional-tests">
		<mkdir dir="${build.test.classes}" />

		<javac source="1.7" target="1.7" debug="true" debuglevel="lines,vars,source" nowarn="off" includeAntRuntime="no" destdir="${build.test.classes}" srcdir="${test.root}">
			<classpath refid="complete.classpath" />
			<compilerarg value="-Xlint:unchecked" />
		</javac>

		<path id="classpath.local.test">
			<fileset dir="${build.release.dependencies}" includes="**/*.jar" />
			<fileset dir="${build.release.sampler}" includes="**/*.jar" />
			<pathelement location="${build.test.classes}" />
			<path refid="lib.jmeter" />
			<path refid="complete.classpath" />
		</path>

		<testng outputdir="${build.qa.test.testdata}" haltonfailure="${testng.haltonfailure}">
			<classpath refid="classpath.local.test" />
			<xmlfileset file="${resources.testng}/testng-localtest.xml" />
		</testng>

		<!-- set the parameters via the commandline like: -DTEST.INSPECTIT.HOST=172.16.145.234 -DTEST.INSPECTIT.PORT=8182 
		<java classname="info.novatec.inspectit.jmeter.localexecution.LocalRunner" classpathref="classpath.local.test">
			<arg value="${TEST.INSPECTIT.HOST}" />
			<arg value="${TEST.INSPECTIT.PORT}" />
		</java> -->
	</target>

	<target name="local-test" depends="release, local-test-execute" description="runs the local test with the libraries that are shipped." />

	<target name="functional-tests" depends="build">
		<ant target="functional-tests-no-dep-build" inheritrefs="true" />
	</target>

	<target name="functional-tests-no-dep-build" depends="init, init-functional-tests">
		<path id="test.compile.classpath">
			<pathelement location="${build.overwrite.classes}" />
			<pathelement location="${build.inspectit.classes}" />
			<pathelement location="${build.classes.root}" />
			<fileset dir="${commons.build.release}" includes="*.jar" />
			<fileset dir="${commonscs.build.release}" includes="*.jar" />
			<path refid="lib.prod" />
			<path refid="lib.test" />
			<path refid="lib.jmeter" />
		</path>

		<fileset id="test.classes-to-instrument" dir="${build.classes.root}" includes="**/*.class" />

		<property name="test.workingDir" value="${basedir}"/>
		<property name="test.javac.source" value="1.7"/>
		<property name="test.javac.target" value="1.7"/>
		<property name="test.vmargs" value=""/>
		<property name="test.targetsuite" value="${resources.testng}/testng.xml"/>

		<execute-testng 
			src.root="${src.root}" 
			test.root="${test.root}" 
			build.qa.test="${build.qa.test}"
			build.qa.test.testdata="${build.qa.test.testdata}" 
			build.qa.test.coveragedata="${build.qa.test.coveragedata}" 
			build.test.classes="${build.test.classes}" 
			build.instrumented.classes="${build.instrumented.classes}"
			test.workingdir="${test.workingDir}"
			test.javac.source="${test.javac.source}" 
			test.javac.target="${test.javac.target}"
			test.targetsuite="${test.targetsuite}"
			test.vmargs="${test.vmargs}"
			test.haltonfailure="true">
			<compile.classpath>
				<classpath>
					<path refid="compile.classpath"/>
				</classpath>
			</compile.classpath>
			<test.compile.classpath>
				<classpath>
					<path refid="test.compile.classpath"/>
				</classpath>
			</test.compile.classpath>
			<test.classes-to-instrument>
				<fileset refid="test.classes-to-instrument" />
			</test.classes-to-instrument>
		</execute-testng>

	</target>

	<target name="static-analysis" depends="build">
		<antcall target="static-analysis-no-dep-build" />
	</target>


	<target name="static-analysis-no-dep-build" depends="init,init-static-analysis">
		<!-- Execute PDM -->
		<fileset dir="${src.root}" id="pmd.fileset">
			<include name="info/novatec/inspectit/**/*.java" />
			<exclude name="info/novatec/inspectit/**/test/**" />
		</fileset>
		
		<execute-pmd build.qa.analysis="${build.qa.analysis}" build.qa.analysis.pmd="${build.qa.analysis.pmd}">
			<pmd.fileset>
				<fileset refid="pmd.fileset" />
			</pmd.fileset>
		</execute-pmd>

		<!-- Execute Checkstyle -->
		<fileset dir="${src.root}" id="checkstyle.fileset">
			<include name="info/novatec/inspectit/**/*.java" />
			<exclude name="info/novatec/inspectit/**/test/**" />
		</fileset>
		
		<execute-checkstyle build.qa.analysis="${build.qa.analysis}" build.qa.analysis.checkstyle="${build.qa.analysis.checkstyle}">
			<checkstyle.fileset>
				<fileset refid="checkstyle.fileset" />
			</checkstyle.fileset>
		</execute-checkstyle>

		<!-- Execute FindBugs -->
		<property name="findbugs.sourcepath" value="${src.root}" />
		<property name="findbugs.classlocation" value="${build.classes.root}" />
		<path id="findbugs.path">
			<path refid="lib.prod" />
			<path refid="lib.test" />
			<pathelement path="${build.commons.classes}" />
		</path>
		
		<execute-findbugs build.qa.analysis="${build.qa.analysis}" build.qa.analysis.findbugs="${build.qa.analysis.findbugs}" findbugs.sourcepath="${findbugs.sourcepath}" findbugs.classlocation="${findbugs.classlocation}">
			<findbugs.path>
				<path refid="findbugs.path" />
			</findbugs.path>
		</execute-findbugs>

		<!-- Execute CPD -->
		<fileset dir="${src.root}" id="cpd.fileset">
			<include name="info/novatec/inspectit/**/*.java" />
			<exclude name="info/novatec/inspectit/**/test/**" />
		</fileset>
		
		<execute-cpd build.qa.analysis.cpd="${build.qa.analysis.cpd}">
			<cpd.fileset>
				<fileset refid="cpd.fileset" />
			</cpd.fileset>
		</execute-cpd>

		<!-- Fail on warnings -->
		<antcall target="static-analysis-fail-on-warnings" inheritrefs="true" />
	</target>
</project>
