<project name="inspectIT RCP" default="release" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property name="release.basedir" value="${basedir}" />
	<property file="build.properties" />

	<import file="${build.common-targets.file}" />

	<path id="path.test.class">
		<pathelement location="${build.test.classes}" />
	</path>

	<path id="path.commons.classes">
		<pathelement location="${buildDirectory}/plugins/${commons.plugin}" />
	</path>

	<path id="path.commonscs.classes">
		<pathelement location="${buildDirectory}/plugins/${commonscs.plugin}" />
	</path>

	<path id="path.commonscs.libs">
		<fileset dir="${lib.commonscs}" includes="**/*.jar" />
	</path>

	<path id="path.rcp">
		<pathelement location="${build.rcp.classes}" />
	</path>

	<!--
        PDE Build expects that the build directory contains a "plugins"
        directory and a "features" directory. These directories should contain
        the various plug-ins and features to be built.

        This build copies the necessary projects as plugins to the build
        folder. It is very important to note that the eclipse build will
        only recognize that the folders are in fact plugins by the manifest
        that is provided.

        The PDE build is hard to understand as there is unfortunately little
        documentation available. I migrated the build to our new structure, there
        are still a few things that had me puzzling:
         - we need two different eclipse installations (i used the old ones)
           using only one of them will lead to errors

        Process:
        1) This build file is called and integrated the build.properties
        2) This build creates everything that is necessary and puts it in the
           location that the build.properties defines.
        3) The PDE build is called. This build also implicitly include the
           build.properties file and read the information from there.

        Note that the release.basedir property was used in order to be able
        to pass the basedir of this build execution to the ANT PDE build
        process in order to be able to set the output folder correctly
        (basedir will be reset as we invoke a new ant build)

        Please see the inspectit Wiki for a more thourough documentation!
    -->


	<!-- *************************************************************** -->
	<!--                        T A R G E T S                            -->
	<!-- *************************************************************** -->

	<target name="clean">
		<delete dir="${basedir}/build" failonerror="false" />
		<delete dir="${basedir}/dist" failonerror="false" />
		<delete dir="${lib.root}/prod" failonerror="false" />
		<delete dir="${lib.root}/test" failonerror="false" />

		<!-- clean the PDE build environment -->
		<delete dir="${buildDirectory}" failonerror="false" />
	</target>

	<target name="dist-commons">
		<ant antfile="${build.commons.file}" target="release-as-plugin" inheritAll="false" useNativeBasedir="true">
			<property name="pluginReleaseDir" value="${buildDirectory}/plugins"/>
		</ant>
	</target>

	<target name="dist-commonscs">
		<ant antfile="${build.commonscs.file}" target="release-as-plugin" inheritAll="false" useNativeBasedir="true">
			<property name="pluginReleaseDir" value="${buildDirectory}/plugins"/>
		</ant>
	</target>

	<target name="init" depends="dist-commons, dist-commonscs">
		<mkdir dir="${buildDirectory}" />
		<mkdir dir="${buildDirectory}/plugins/info.novatec.inspectit.commons" />
		<mkdir dir="${buildDirectory}/plugins/info.novatec.inspectit.commons/META-INF" />
		<mkdir dir="${buildDirectory}/features" />
		<antcall target="init-ivy" />

		<!-- ivy properties -->
		<ivy:settings file="${ivy.settings.file}" />
		<ivy:resolve file="${ivy.file}" />
		<!-- because of the RCP build we still need to have the lib folder -->
		<ivy:retrieve pattern="${basedir}/../lib/[conf]/[artifact].[ext]" />
		<ivy:cachepath pathid="lib.prod" conf="prod" />
		<ivy:cachepath pathid="lib.test" conf="test" />

		<copy todir="${buildDirectory}/plugins/${topLevelElementId}">
			<fileset dir="${basedir}/..">
				<exclude name="**/release/**" />
				<include name="**" />
			</fileset>
		</copy>
	</target>

	<!-- *************************************************************** -->
	<!--                E C L I P S E     T A R G E T S                  -->
	<!-- *************************************************************** -->
	<!-- These targets actually download the needed Eclipse versions from-->
	<!-- the FTP and unpack them in order to be used by the PDE Build.   -->
	<!-- *************************************************************** -->
	<target name="checkForEclipse" depends="init, init-ftp-task" description="Checks whether Eclipse is already present.">
		<condition property="isEclipsePresent">
			<available file="${release.basedir}/runtime/${eclipse.zip}" property="isEclipsePresent" />
		</condition>
	</target>

	<target name="retrieve-eclipse" depends="checkForEclipse" unless="isEclipsePresent" description="Downloads Eclipse from the FTP and unpacks it.">
		<echo message="Downloading Eclipse from ${ftp.server}" />
		<wptg-ftp server="${ftp.server}" verbose="true" password="${ftp.pw}" userid="${ftp.user}" action="get" remotedir="${ftp.eclipsedir}" newer="true" retriesAllowed="5" passive="true">
			<fileset dir="${release.basedir}/runtime">
				<include name="${eclipse.zip}" />
			</fileset>
		</wptg-ftp>
		<unzip src="${release.basedir}/runtime/${eclipse.zip}" dest="${release.basedir}/runtime" />
	</target>


	<!-- *************************************************************** -->
	<!--                Q U A L I T Y     T A R G E T S                  -->
	<!-- *************************************************************** -->
	<!-- These targets are used to ensure the quality of the User        -->
	<!-- Interface.                                                      -->
	<!-- *************************************************************** -->

	<!--  It depends on the release target, because we need the compiled class files from the PDE Build-->
	<target name="functional-tests" depends="release, init-functional-tests">
		<mkdir dir="${build.qa.test.testdata}" />
		<mkdir dir="${build.test.classes}" />

		<javac source="1.7" target="1.7" debug="true" nowarn="off" includeAntRuntime="no" destdir="${build.test.classes}" srcdir="${test.root}">
			<classpath refid="lib.test" />
			<classpath refid="path.testng" />
			<classpath refid="path.rcp" />
			<classpath refid="path.commons.classes" />
			<classpath refid="path.commonscs.classes" />
			<compilerarg value="-Xlint:unchecked" />
		</javac>

		<!-- instrument the classes that should be included in test coverage -->
		<mkdir dir="${build.instrumented.classes}" />

		<!-- ensure that the original class files are not touched as we do not want to -->
		<!-- ship classes that are instrumented with cobertura to the customer -->
		<copy todir="${build.instrumented.classes}">
			<fileset dir="${build.rcp.classes}" includes="**/*.class" />
		</copy>

		<cobertura-instrument datafile="${build.qa.test.coveragedata}/cobertura.ser">
			<!-- Deactivate Cobertura for now ... -->
			<!-- includeClasses regex="info.novatec.inspectit.*" /-->
			<excludeClasses regex="info.novatec.inspectit.*\.test.*" />
			<excludeClasses regex="info.novatec.inspectit.cmr.*" />
			<excludeClasses regex="info.novatec.inspectit.communication.*" />
			<!-- Deactivate Cobertura for now ... -->
			<!--instrumentationClasspath>
				<path location="${build.instrumented.classes}" />
			</instrumentationClasspath-->
			<classpath refid="lib.test" />
			<classpath location="${build.instrumented.classes}" />
		</cobertura-instrument>

		<testng outputdir="${build.qa.test.testdata}" haltonfailure="${testng.haltonfailure}">
			<classpath refid="lib.test" />
			<classpath refid="path.commons.classes" />
			<classpath refid="path.commonscs.classes" />
			<classpath refid="path.test.class" />
			<classpath refid="path.testng" />
			<classpath refid="path.cobertura" />
			<classpath location="${build.instrumented.classes}" />
			<classpath location="${test.root}" />
			<classpath refid="path.rcp" />

			<jvmarg value="-Dnet.sourceforge.cobertura.datafile=${build.qa.test.coveragedata}/cobertura.ser" />

			<xmlfileset file="${resources.testng}/testng.xml" />
		</testng>

		<!-- create cobertura html and xml reports and link to the interesting parts -->
		<cobertura-report format="html" destdir="${build.qa.test.coveragedata}" srcdir="${src.root}" datafile="${build.qa.test.coveragedata}/cobertura.ser">
			<fileset dir="${src.root}" includes="**/*.java" />
			<fileset dir="${test.root}" includes="**/*.java" />
		</cobertura-report>
		<cobertura-report format="xml" destdir="${build.qa.test.coveragedata}" srcdir="${src.root}" datafile="${build.qa.test.coveragedata}/cobertura.ser">
			<fileset dir="${src.root}" includes="**/*.java" />
			<fileset dir="${test.root}" includes="**/*.java" />
		</cobertura-report>
		<echo file="${build.qa.test}/coverage.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=coveragedata/index.html&quot; >" />

		<!-- create html pages that link to the interesting parts -->
		<echo file="${build.qa.test}/testresults.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=testdata/index.html&quot; >" />
		<echo file="${build.qa.test}/testreport.html" message="&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=testdata/emailable-report.html&quot; >" />
	</target>


	<!--  It depends on the release target, because we need the compiled class files from the PDE Build-->
	<target name="static-analysis" depends="release">
		<!-- Call PDM -->
		<fileset dir="${src.root}" includes="**/*.java" id="pmd.fileset" />
		<antcall target="pmd" inheritrefs="true"/>

		<!-- Call Checkstyle -->
		<fileset dir="${src.root}" includes="**/*.java" id="checkstyle.fileset" />
		<antcall target="checkstyle" inheritrefs="true"/>

		<!-- Call FindBugs -->
		<property name="findbugs.sourcepath" value="${src.root}" />
		<property name="findbugs.classlocation" value="${buildDirectory}/plugins/info.novatec.inspectit.rcp/@dot" />
		<path id="findbugs.path" >
			<pathelement path="${build.commons.classes}" />
			<pathelement path="${build.commonscs.classes}" />
			<path refid="lib.prod"/>
			<path refid="lib.test"/>
		</path>
		<antcall target="findbugs" inheritrefs="true"/>

		<!-- Call CPD -->
		<fileset dir="${src.root}" includes="**/*.java" id="cpd.fileset"/>
		<antcall target="cpd" inheritrefs="true"/>
	</target>


	<!-- *************************************************************** -->
	<!--                R E L E A S E     T A R G E T S                  -->
	<!-- *************************************************************** -->
	<!-- This target actually executes the PDE Build process by  		 -->
	<!-- launching the Eclipse antRunner application.     				 -->
	<!-- *************************************************************** -->
	<target name="release" depends="retrieve-eclipse">
		<mkdir dir="${basedir}/dist" />
		<echo message="Executing ${eclipseLocation}/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar" />
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">
			<arg value="-application" />
			<arg value="org.eclipse.ant.core.antRunner" />
			<arg value="-buildfile" />
			<arg value="${eclipseLocation}/plugins/org.eclipse.pde.build_${pdeBuildPluginVersion}/scripts/productBuild/productBuild.xml" />
			<arg value="-Dtimestamp=${timestamp}" />
			<arg value="-Drelease.basedir=${basedir}" />
			<classpath>
				<pathelement location="${eclipseLocation}/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar" />
			</classpath>
		</java>

		<copy todir="${basedir}/dist">
			<fileset dir="${buildDirectory}/${buildLabel}" includes="*.zip" />
		</copy>

		<!--  Need to copy the compiled class files in order to later be used by the functional-tests and static-analysis targets -->
		<copy todir="${build.rcp.classes}">
			<fileset dir="${buildDirectory}/plugins/info.novatec.inspectit.rcp/@dot" includes="**/*.class" />
		</copy>

		<!-- integrate the thirdparty contributions to the release -->
		<!-- copy the jvms -->
		<antcall target="-create-thirdparty-notification" />
		<antcall target="-retrieve-jre-installations" />

		<zip destfile="${release.basedir}/dist/inspectit-win32.win32.x86.zip" update="true">
			<zipfileset prefix="inspectit" dir="${release.basedir}" includes="thirdparty.txt" />
			<zipfileset dir="../../Commons/resources" prefix="inspectit" includes="inspectIT-licence.pdf" />
			<zipfileset src="${jvm.root}/jre7-windows-x86.zip" prefix="inspectit/jre" filemode="775" />
		</zip>
		<zip destfile="${release.basedir}/dist/inspectit-win32.win32.x86_64.zip" update="true">
			<zipfileset prefix="inspectit" dir="${release.basedir}" includes="thirdparty.txt" />
			<zipfileset dir="../../Commons/resources" prefix="inspectit" includes="inspectIT-licence.pdf" />
			<zipfileset src="${jvm.root}/jre7-windows-x64.zip" prefix="inspectit/jre" filemode="775" />
		</zip>
		<zip destfile="${release.basedir}/dist/inspectit-linux.gtk.x86.zip" update="true">
			<zipfileset prefix="inspectit" dir="${release.basedir}" includes="thirdparty.txt" />
			<zipfileset dir="../../Commons/resources" prefix="inspectit" includes="inspectIT-licence.pdf" />
			<zipfileset src="${jvm.root}/jre7-linux-x86.zip" prefix="inspectit/jre" filemode="775" />
		</zip>
		<zip destfile="${release.basedir}/dist/inspectit-linux.gtk.x86_64.zip" update="true">
			<zipfileset prefix="inspectit" dir="${release.basedir}" includes="thirdparty.txt" />
			<zipfileset dir="../../Commons/resources" prefix="inspectit" includes="inspectIT-licence.pdf" />
			<zipfileset src="${jvm.root}/jre7-linux-x64.zip" prefix="inspectit/jre" filemode="775" />
		</zip>
		<!-- The Mac versions are unavailable until Java7 is done for Mac -->
		<!-- <zip destfile="${release.basedir}/dist/inspectit-macosx.cocoa.x86.zip" update="true">
			<zipfileset prefix="inspectit" dir="${release.basedir}" includes="thirdparty.txt" />
			<zipfileset dir="../../Commons/resources" prefix="inspectit" includes="inspectIT-licence.pdf" />
		</zip>
		<zip destfile="${release.basedir}/dist/inspectit-macosx.cocoa.x86_64.zip" update="true">
			<zipfileset prefix="inspectit" dir="${release.basedir}" includes="thirdparty.txt" />
			<zipfileset dir="../../Commons/resources" prefix="inspectit" includes="inspectIT-licence.pdf" />
		</zip> -->
	</target>

	<target name="-create-thirdparty-notification">
		<echo file="${release.basedir}/thirdparty.txt" message="The inspectIT UI uses the following third party libraries: ${line.separator}
Apache Software License, 2.0 :  jettison (1.2), httpclient(4.1.1), httpcore (4.1.1), guava (11.0.1), commons-logging (1.1.1), commons-lang (2.5), spring-core (3.1.0.RELEASE), spring-context (3.1.0.RELEASE), spring-beans (3.1.0.RELEASE), spring-web (3.1.0.RELEASE), spring-asm (3.1.0.RELEASE), spring-expression (3.1.0.RELEASE), spring-aop (3.1.0.RELEASE), cglib-nodep (2.2.2), beanlib (5.0.2beta), beanlib-hibernate (5.0.2beta), gilead-core (1.3.2), glead-hibernate (1.3.2)  ${line.separator}
BSD License :  xstream (1.3.1), kryo (1.04), reflectasm (1.01), minlog (1.2), asm (3.3.1) ${line.separator}
Eclipse Public License (EPL), 1.0 : nebula-cwt (0.9.0), nebula-cdatetime (0.14.0) ${line.separator}
GNU Lesser General Public License (LGPL), 2.1 : hibernate-core (3.5.3-Final), jcommon (1.0.16), jfreechart (1.0.13), jfreechart-swt (1.0.13), jfreechart-experimental (1.0.13), swtgraphics2d (1.0.13)" />
	</target>

	<!-- Calls the release target and then the analysis targets -->
	<target name="release-and-analyze" depends="static-analysis, functional-tests, release" description="--> Calls the release target and then executes the static analysis with the functional tests" />

	<target name="integrate-version-information" description="Integrates the version information into the about box of the UI">
		<property environment="env" />
		<property name="version" value="${env.RELEASE_VERSION}.${env.BUILD_NUMBER}" />
		<tstamp />

		<echo message="Using version: ${version}" />

		<echo file="../plugin.properties" message="aboutText=
			inspectIT - http://www.inspectit.eu\n\n\
			Application Performance Engineering solution\n\
			\n\n\n\
			Version: ${version}\n\
			Build ID: ${DSTAMP}${TSTAMP}
			" />
		<echo message="Wrote plugin.properties to inspectIT project" />
	</target>

</project>
