<project name="inspectit release" default="release" 
	 xmlns:ivy="antlib:org.apache.ivy.ant">
	
	<property name="release.basedir" value="${basedir}" />
	<property file="build.properties" />
	

	<!--
        PDE Build expects that the build directory contains a "plugins"
        directory and a "features" directory. These directories should contain
        the various plug-ins and features to be built.
       
        This build copies the necessary projects as plugins to the build
        folder. It is very important to note that the eclipse build will
        only recognize that the folders are in fact plugins by the manifest
        that is provided.
        
        The PDE build is hard to understand as there is unfortunately little
        documentation available. I migrated the build to our new structure, there
        are still a few things that had me puzzling:
         - we need two different eclipse installations (i used the old ones)
           using only one of them will lead to errors
        
        Process:
        1) This build file is called and integrated the build.properties
        2) This build creates everything that is necessary and puts it in the 
           location that the build.properties defines.
        3) The PDE build is called. This build also implicitly include the
           build.properties file and read the information from there.
           
        Note that the release.basedir property was used in order to be able
        to pass the basedir of this build execution to the ANT PDE build
        process in order to be able to set the output folder correctly
        (basedir will be reset as we invoke a new ant build)
        
        Please see the inspectit Wiki for a more thourough documentation!
    -->
	
	<target name="clean">
		<delete file="../lib/inspectit-commons.jar" />
		<delete dir="${basedir}/build" />
		<delete dir="${basedir}/dist" />
		
		<!-- clean the PDE build environment -->
		<delete dir="${buildDirectory}" />
	</target>
	
	<target name="dist-commons">
		<mkdir dir="${basedir}/build" />
		<javac source="1.4" target="1.4" debug="true" fork="true" destdir="${basedir}/build" srcdir="../../Commons" />
		<jar destfile="${basedir}/build/inspectit-commons.jar">
			<fileset dir="${basedir}/build" includes="**/*.class" />
		</jar>
		<copy file="${basedir}/build/inspectit-commons.jar" tofile="../lib/inspectit-commons.jar" failonerror="true" />
	</target>
	
	<target name="init" depends="dist-commons">
		<mkdir dir="${buildDirectory}" />
		<mkdir dir="${buildDirectory}/plugins/info.novatec.inspectit.commons" />
		<mkdir dir="${buildDirectory}/features" />
		
		<!-- Commons plugin -->
		<!-- Currently I would say this is not even necessary! as the lib is integrated with the RCP product -->
		
		<copy todir="${buildDirectory}/plugins/info.novatec.inspectit.commons">
			<fileset dir="../../Commons/">
				<include name="**" />
			</fileset>
		</copy>
		
		
		<copy todir="${buildDirectory}/plugins/${topLevelElementId}">
			<fileset dir="${basedir}/..">
				<exclude name="**/release/**" />
				<include name="**"/>
			</fileset>
		</copy>
	</target>
		
    <!--
        This target actually executes the PDE Build process by launching the
        Eclipse antRunner application.
    -->
    <target name="release" depends="clean, init">
    	<mkdir dir="${basedir}/dist"/>
        <echo message="Executing ${eclipseLocation}/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar"/>
    	<java  classname="org.eclipse.equinox.launcher.Main" fork="true" failonerror="true">
            <arg value="-application" />
            <arg value="org.eclipse.ant.core.antRunner" />
            <arg value="-buildfile" />
            <arg value="${eclipseLocation}/plugins/org.eclipse.pde.build_${pdeBuildPluginVersion}/scripts/productBuild/productBuild.xml" />
            <arg value="-Dtimestamp=${timestamp}" />
    		<arg value="-Drelease.basedir=${basedir}" />
            <classpath>
                <pathelement location="${eclipseLocation}/plugins/org.eclipse.equinox.launcher_${equinoxLauncherPluginVersion}.jar" />
            </classpath>
        </java>
    	
    	<copy todir="${basedir}/dist">
    		<fileset dir="${buildDirectory}/I.inspectit" includes="*.zip" />
    	</copy> 
    </target>
  </project>