<?xml version="1.0"?>
<!-- ======================================================================
		inspectIT - CommonsCS
		Sophisticated Monitoring tool by NovaTec GmbH
		====================================================================== -->
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="inspectIT - CommonsCS" default="release" basedir="../">
	<description>
		Sophisticated Monitoring tool by NovaTec GmbH
	</description>

	<property file="${basedir}/resources/build.properties" />

	<import file="${build.common-targets.file}" />

	<target name="clean">
		<delete dir="${build.root}" />
	</target>

	<target name="init" description="--> Creates necessary folder structure" depends="init-ivy">
		<mkdir dir="${build.root}" />

		<ivy:settings file="${ivy.settings.file}" />
		<ivy:resolve file="${ivy.file}" />
		<ivy:cachepath pathid="lib.prod" conf="prod" />
		<ivy:cachepath pathid="lib.osgi" conf="osgi" />
		
		<ivy:resolve file="${ivy.file.commons}" />
		<ivy:cachepath pathid="lib.prod.commons" conf="prod" />
	</target>

	<!-- *************************************************************** -->
	<!--                   B U I L D    T A R G E T S                    -->
	<!-- *************************************************************** -->

	<target name="release-commons" description="--> call the release of the commons project">
		<ant antfile="${build.commons.file}" target="clean" inheritAll="false" useNativeBasedir="true" />
		<ant antfile="${build.commons.file}" target="release" inheritAll="false" useNativeBasedir="true" />
	</target>

	<target name="build" depends="init, release-commons" description="--> builds a clean distribution of the cscommons project and copies the classes to the local build folder">
		<mkdir dir="${build.commonscs.classes}" />

		<path id="compile.classpath">
			<pathelement location="${build.commons.classes}" />
			<path refid="lib.prod" />
			<path refid="lib.prod.commons" />
		</path>

		<javac source="1.7" target="1.7" debug="true" fork="true" includeAntRuntime="no" destdir="${build.commonscs.classes}" srcdir="${src.root}" classpathref="compile.classpath">
			<compilerarg value="-Xlint:unchecked" />
		</javac>

	</target>



	<!-- *************************************************************** -->
	<!--                R E L E A S E     T A R G E T S                  -->
	<!-- *************************************************************** -->

	<target name="release" depends="build" description="--> Creates the distribution jar">
		<mkdir dir="${build.release.root}" />

		<jar destfile="${build.release.root}/${dist.jar.name}" basedir="${build.commonscs.classes}" />
	</target>

	<target name="release-as-plugin" depends="build" if="pluginReleaseDir" description="--> Release the classes and manifest as plug-in in defined directory">
		<mkdir dir="${pluginReleaseDir}/${plugin.name}" />
		<mkdir dir="${pluginReleaseDir}/${plugin.name}/META-INF" />

		<copy file="${basedir}/META-INF/MANIFEST.MF" todir="${pluginReleaseDir}/${plugin.name}/META-INF" />
		<copy todir="${pluginReleaseDir}/${plugin.name}">
			<fileset dir="${build.commonscs.classes}">
				<include name="**/*.*" />
			</fileset>
		</copy>

		<!-- We need to separate the real jars from sources and other artifacts -->
		<!-- that's why we need a TMP folder -->
		<copy todir="${build.release.root}/lib/tmp" flatten="true">
			<path refid="lib.osgi" />
		</copy>
		<copy todir="${pluginReleaseDir}">
			<fileset dir="${build.release.root}/lib/tmp">
				<include name="**/*.jar" />
				<exclude name="**/*sources*.jar" />
			</fileset>
		</copy>
		<delete dir="${build.release.root}/lib/tmp" failonerror="false" />
	</target>

	<!-- Calls the release target and then the analysis targets -->
	<target name="release-and-analyze" depends="static-analysis, release" description="--> Calls the release target and then executes the static analysis" />

	<!-- *************************************************************** -->
	<!--                Q U A L I T Y     T A R G E T S                  -->
	<!-- *************************************************************** -->

	<!-- Depends on build, because the compiled classes are needed for the analysis -->
	<target name="static-analysis" depends="build">
		<!-- Prepare PDM -->
		<fileset dir="${src.root}" includes="info/novatec/inspectit/**/*.java" id="pmd.fileset" />

		<!-- Prepare Checkstyle -->
		<fileset dir="${src.root}" includes="**/*.java" id="checkstyle.fileset" />

		<!-- Prepare FindBugs -->
		<property name="findbugs.sourcepath" value="${src.root}" />
		<property name="findbugs.classlocation" value="${build.commonscs.classes}" />
		<path id="findbugs.path">
			<pathelement path="${build.commons.classes}" />
			<path refid="lib.prod" />
		</path>

		<!-- Prepare CPD -->
		<fileset dir="${src.root}" includes="**/*.java" id="cpd.fileset" />

		<antcall target="static-analysis-all" inheritrefs="true" />
	</target>

</project>
